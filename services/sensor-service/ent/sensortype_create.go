// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/skni-kod/iot-monitor-backend/services/sensor-service/ent/sensor"
	"github.com/skni-kod/iot-monitor-backend/services/sensor-service/ent/sensortype"
)

// SensorTypeCreate is the builder for creating a SensorType entity.
type SensorTypeCreate struct {
	config
	mutation *SensorTypeMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (stc *SensorTypeCreate) SetName(s string) *SensorTypeCreate {
	stc.mutation.SetName(s)
	return stc
}

// SetModel sets the "model" field.
func (stc *SensorTypeCreate) SetModel(s string) *SensorTypeCreate {
	stc.mutation.SetModel(s)
	return stc
}

// SetManufacturer sets the "manufacturer" field.
func (stc *SensorTypeCreate) SetManufacturer(s string) *SensorTypeCreate {
	stc.mutation.SetManufacturer(s)
	return stc
}

// SetNillableManufacturer sets the "manufacturer" field if the given value is not nil.
func (stc *SensorTypeCreate) SetNillableManufacturer(s *string) *SensorTypeCreate {
	if s != nil {
		stc.SetManufacturer(*s)
	}
	return stc
}

// SetDescription sets the "description" field.
func (stc *SensorTypeCreate) SetDescription(s string) *SensorTypeCreate {
	stc.mutation.SetDescription(s)
	return stc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (stc *SensorTypeCreate) SetNillableDescription(s *string) *SensorTypeCreate {
	if s != nil {
		stc.SetDescription(*s)
	}
	return stc
}

// SetUnit sets the "unit" field.
func (stc *SensorTypeCreate) SetUnit(s string) *SensorTypeCreate {
	stc.mutation.SetUnit(s)
	return stc
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (stc *SensorTypeCreate) SetNillableUnit(s *string) *SensorTypeCreate {
	if s != nil {
		stc.SetUnit(*s)
	}
	return stc
}

// SetMinValue sets the "min_value" field.
func (stc *SensorTypeCreate) SetMinValue(f float64) *SensorTypeCreate {
	stc.mutation.SetMinValue(f)
	return stc
}

// SetNillableMinValue sets the "min_value" field if the given value is not nil.
func (stc *SensorTypeCreate) SetNillableMinValue(f *float64) *SensorTypeCreate {
	if f != nil {
		stc.SetMinValue(*f)
	}
	return stc
}

// SetMaxValue sets the "max_value" field.
func (stc *SensorTypeCreate) SetMaxValue(f float64) *SensorTypeCreate {
	stc.mutation.SetMaxValue(f)
	return stc
}

// SetNillableMaxValue sets the "max_value" field if the given value is not nil.
func (stc *SensorTypeCreate) SetNillableMaxValue(f *float64) *SensorTypeCreate {
	if f != nil {
		stc.SetMaxValue(*f)
	}
	return stc
}

// SetCreatedAt sets the "created_at" field.
func (stc *SensorTypeCreate) SetCreatedAt(t time.Time) *SensorTypeCreate {
	stc.mutation.SetCreatedAt(t)
	return stc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (stc *SensorTypeCreate) SetNillableCreatedAt(t *time.Time) *SensorTypeCreate {
	if t != nil {
		stc.SetCreatedAt(*t)
	}
	return stc
}

// AddSensorIDs adds the "sensors" edge to the Sensor entity by IDs.
func (stc *SensorTypeCreate) AddSensorIDs(ids ...int) *SensorTypeCreate {
	stc.mutation.AddSensorIDs(ids...)
	return stc
}

// AddSensors adds the "sensors" edges to the Sensor entity.
func (stc *SensorTypeCreate) AddSensors(s ...*Sensor) *SensorTypeCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stc.AddSensorIDs(ids...)
}

// Mutation returns the SensorTypeMutation object of the builder.
func (stc *SensorTypeCreate) Mutation() *SensorTypeMutation {
	return stc.mutation
}

// Save creates the SensorType in the database.
func (stc *SensorTypeCreate) Save(ctx context.Context) (*SensorType, error) {
	stc.defaults()
	return withHooks(ctx, stc.sqlSave, stc.mutation, stc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stc *SensorTypeCreate) SaveX(ctx context.Context) *SensorType {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *SensorTypeCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *SensorTypeCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stc *SensorTypeCreate) defaults() {
	if _, ok := stc.mutation.CreatedAt(); !ok {
		v := sensortype.DefaultCreatedAt()
		stc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *SensorTypeCreate) check() error {
	if _, ok := stc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SensorType.name"`)}
	}
	if v, ok := stc.mutation.Name(); ok {
		if err := sensortype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SensorType.name": %w`, err)}
		}
	}
	if _, ok := stc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required field "SensorType.model"`)}
	}
	if v, ok := stc.mutation.Model(); ok {
		if err := sensortype.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`ent: validator failed for field "SensorType.model": %w`, err)}
		}
	}
	if _, ok := stc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SensorType.created_at"`)}
	}
	return nil
}

func (stc *SensorTypeCreate) sqlSave(ctx context.Context) (*SensorType, error) {
	if err := stc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	stc.mutation.id = &_node.ID
	stc.mutation.done = true
	return _node, nil
}

func (stc *SensorTypeCreate) createSpec() (*SensorType, *sqlgraph.CreateSpec) {
	var (
		_node = &SensorType{config: stc.config}
		_spec = sqlgraph.NewCreateSpec(sensortype.Table, sqlgraph.NewFieldSpec(sensortype.FieldID, field.TypeInt))
	)
	if value, ok := stc.mutation.Name(); ok {
		_spec.SetField(sensortype.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := stc.mutation.Model(); ok {
		_spec.SetField(sensortype.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := stc.mutation.Manufacturer(); ok {
		_spec.SetField(sensortype.FieldManufacturer, field.TypeString, value)
		_node.Manufacturer = value
	}
	if value, ok := stc.mutation.Description(); ok {
		_spec.SetField(sensortype.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := stc.mutation.Unit(); ok {
		_spec.SetField(sensortype.FieldUnit, field.TypeString, value)
		_node.Unit = value
	}
	if value, ok := stc.mutation.MinValue(); ok {
		_spec.SetField(sensortype.FieldMinValue, field.TypeFloat64, value)
		_node.MinValue = value
	}
	if value, ok := stc.mutation.MaxValue(); ok {
		_spec.SetField(sensortype.FieldMaxValue, field.TypeFloat64, value)
		_node.MaxValue = value
	}
	if value, ok := stc.mutation.CreatedAt(); ok {
		_spec.SetField(sensortype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := stc.mutation.SensorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sensortype.SensorsTable,
			Columns: []string{sensortype.SensorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sensor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SensorTypeCreateBulk is the builder for creating many SensorType entities in bulk.
type SensorTypeCreateBulk struct {
	config
	err      error
	builders []*SensorTypeCreate
}

// Save creates the SensorType entities in the database.
func (stcb *SensorTypeCreateBulk) Save(ctx context.Context) ([]*SensorType, error) {
	if stcb.err != nil {
		return nil, stcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*SensorType, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SensorTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *SensorTypeCreateBulk) SaveX(ctx context.Context) []*SensorType {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *SensorTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *SensorTypeCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}
