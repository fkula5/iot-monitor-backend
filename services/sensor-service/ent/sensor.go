// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/skni-kod/iot-monitor-backend/services/sensor-service/ent/sensor"
	"github.com/skni-kod/iot-monitor-backend/services/sensor-service/ent/sensortype"
)

// Sensor is the model entity for the Sensor schema.
type Sensor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name of the sensor
	Name string `json:"name,omitempty"`
	// Physical location of the sensor
	Location string `json:"location,omitempty"`
	// Description of the sensor
	Description string `json:"description,omitempty"`
	// Whether the sensor is currently active
	Active bool `json:"active,omitempty"`
	// Last time the sensor value was updated
	LastUpdated time.Time `json:"last_updated,omitempty"`
	// ID of the user who owns the sensor
	UserID int64 `json:"user_id,omitempty"`
	// Time when the sensor was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SensorQuery when eager-loading is set.
	Edges               SensorEdges `json:"edges"`
	sensor_type         *int
	sensor_type_sensors *int
	selectValues        sql.SelectValues
}

// SensorEdges holds the relations/edges for other nodes in the graph.
type SensorEdges struct {
	// The type of this sensor
	Type *SensorType `json:"type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TypeOrErr returns the Type value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SensorEdges) TypeOrErr() (*SensorType, error) {
	if e.Type != nil {
		return e.Type, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: sensortype.Label}
	}
	return nil, &NotLoadedError{edge: "type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sensor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sensor.FieldActive:
			values[i] = new(sql.NullBool)
		case sensor.FieldID, sensor.FieldUserID:
			values[i] = new(sql.NullInt64)
		case sensor.FieldName, sensor.FieldLocation, sensor.FieldDescription:
			values[i] = new(sql.NullString)
		case sensor.FieldLastUpdated, sensor.FieldCreatedAt, sensor.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case sensor.ForeignKeys[0]: // sensor_type
			values[i] = new(sql.NullInt64)
		case sensor.ForeignKeys[1]: // sensor_type_sensors
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sensor fields.
func (s *Sensor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sensor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case sensor.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case sensor.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				s.Location = value.String
			}
		case sensor.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case sensor.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				s.Active = value.Bool
			}
		case sensor.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_updated", values[i])
			} else if value.Valid {
				s.LastUpdated = value.Time
			}
		case sensor.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				s.UserID = value.Int64
			}
		case sensor.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case sensor.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case sensor.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field sensor_type", value)
			} else if value.Valid {
				s.sensor_type = new(int)
				*s.sensor_type = int(value.Int64)
			}
		case sensor.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field sensor_type_sensors", value)
			} else if value.Valid {
				s.sensor_type_sensors = new(int)
				*s.sensor_type_sensors = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Sensor.
// This includes values selected through modifiers, order, etc.
func (s *Sensor) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryType queries the "type" edge of the Sensor entity.
func (s *Sensor) QueryType() *SensorTypeQuery {
	return NewSensorClient(s.config).QueryType(s)
}

// Update returns a builder for updating this Sensor.
// Note that you need to call Sensor.Unwrap() before calling this method if this Sensor
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sensor) Update() *SensorUpdateOne {
	return NewSensorClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Sensor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sensor) Unwrap() *Sensor {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Sensor is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sensor) String() string {
	var builder strings.Builder
	builder.WriteString("Sensor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(s.Location)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", s.Active))
	builder.WriteString(", ")
	builder.WriteString("last_updated=")
	builder.WriteString(s.LastUpdated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", s.UserID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Sensors is a parsable slice of Sensor.
type Sensors []*Sensor
