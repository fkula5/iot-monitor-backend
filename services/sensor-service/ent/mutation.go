// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/skni-kod/iot-monitor-backend/services/sensor-service/ent/predicate"
	"github.com/skni-kod/iot-monitor-backend/services/sensor-service/ent/sensor"
	"github.com/skni-kod/iot-monitor-backend/services/sensor-service/ent/sensortype"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSensor     = "Sensor"
	TypeSensorType = "SensorType"
)

// SensorMutation represents an operation that mutates the Sensor nodes in the graph.
type SensorMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	location      *string
	description   *string
	active        *bool
	last_updated  *time.Time
	user_id       *int64
	adduser_id    *int64
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	_type         *int
	cleared_type  bool
	done          bool
	oldValue      func(context.Context) (*Sensor, error)
	predicates    []predicate.Sensor
}

var _ ent.Mutation = (*SensorMutation)(nil)

// sensorOption allows management of the mutation configuration using functional options.
type sensorOption func(*SensorMutation)

// newSensorMutation creates new mutation for the Sensor entity.
func newSensorMutation(c config, op Op, opts ...sensorOption) *SensorMutation {
	m := &SensorMutation{
		config:        c,
		op:            op,
		typ:           TypeSensor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSensorID sets the ID field of the mutation.
func withSensorID(id int) sensorOption {
	return func(m *SensorMutation) {
		var (
			err   error
			once  sync.Once
			value *Sensor
		)
		m.oldValue = func(ctx context.Context) (*Sensor, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Sensor.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSensor sets the old Sensor of the mutation.
func withSensor(node *Sensor) sensorOption {
	return func(m *SensorMutation) {
		m.oldValue = func(context.Context) (*Sensor, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SensorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SensorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SensorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SensorMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Sensor.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *SensorMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SensorMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Sensor entity.
// If the Sensor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SensorMutation) ResetName() {
	m.name = nil
}

// SetLocation sets the "location" field.
func (m *SensorMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *SensorMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the Sensor entity.
// If the Sensor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ClearLocation clears the value of the "location" field.
func (m *SensorMutation) ClearLocation() {
	m.location = nil
	m.clearedFields[sensor.FieldLocation] = struct{}{}
}

// LocationCleared returns if the "location" field was cleared in this mutation.
func (m *SensorMutation) LocationCleared() bool {
	_, ok := m.clearedFields[sensor.FieldLocation]
	return ok
}

// ResetLocation resets all changes to the "location" field.
func (m *SensorMutation) ResetLocation() {
	m.location = nil
	delete(m.clearedFields, sensor.FieldLocation)
}

// SetDescription sets the "description" field.
func (m *SensorMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *SensorMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Sensor entity.
// If the Sensor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *SensorMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[sensor.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *SensorMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[sensor.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *SensorMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, sensor.FieldDescription)
}

// SetActive sets the "active" field.
func (m *SensorMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *SensorMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the Sensor entity.
// If the Sensor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *SensorMutation) ResetActive() {
	m.active = nil
}

// SetLastUpdated sets the "last_updated" field.
func (m *SensorMutation) SetLastUpdated(t time.Time) {
	m.last_updated = &t
}

// LastUpdated returns the value of the "last_updated" field in the mutation.
func (m *SensorMutation) LastUpdated() (r time.Time, exists bool) {
	v := m.last_updated
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUpdated returns the old "last_updated" field's value of the Sensor entity.
// If the Sensor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorMutation) OldLastUpdated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUpdated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUpdated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUpdated: %w", err)
	}
	return oldValue.LastUpdated, nil
}

// ClearLastUpdated clears the value of the "last_updated" field.
func (m *SensorMutation) ClearLastUpdated() {
	m.last_updated = nil
	m.clearedFields[sensor.FieldLastUpdated] = struct{}{}
}

// LastUpdatedCleared returns if the "last_updated" field was cleared in this mutation.
func (m *SensorMutation) LastUpdatedCleared() bool {
	_, ok := m.clearedFields[sensor.FieldLastUpdated]
	return ok
}

// ResetLastUpdated resets all changes to the "last_updated" field.
func (m *SensorMutation) ResetLastUpdated() {
	m.last_updated = nil
	delete(m.clearedFields, sensor.FieldLastUpdated)
}

// SetUserID sets the "user_id" field.
func (m *SensorMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *SensorMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Sensor entity.
// If the Sensor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *SensorMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *SensorMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *SensorMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SensorMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SensorMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Sensor entity.
// If the Sensor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SensorMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SensorMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SensorMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Sensor entity.
// If the Sensor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SensorMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTypeID sets the "type" edge to the SensorType entity by id.
func (m *SensorMutation) SetTypeID(id int) {
	m._type = &id
}

// ClearType clears the "type" edge to the SensorType entity.
func (m *SensorMutation) ClearType() {
	m.cleared_type = true
}

// TypeCleared reports if the "type" edge to the SensorType entity was cleared.
func (m *SensorMutation) TypeCleared() bool {
	return m.cleared_type
}

// TypeID returns the "type" edge ID in the mutation.
func (m *SensorMutation) TypeID() (id int, exists bool) {
	if m._type != nil {
		return *m._type, true
	}
	return
}

// TypeIDs returns the "type" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TypeID instead. It exists only for internal usage by the builders.
func (m *SensorMutation) TypeIDs() (ids []int) {
	if id := m._type; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetType resets all changes to the "type" edge.
func (m *SensorMutation) ResetType() {
	m._type = nil
	m.cleared_type = false
}

// Where appends a list predicates to the SensorMutation builder.
func (m *SensorMutation) Where(ps ...predicate.Sensor) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SensorMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SensorMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Sensor, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SensorMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SensorMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Sensor).
func (m *SensorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SensorMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.name != nil {
		fields = append(fields, sensor.FieldName)
	}
	if m.location != nil {
		fields = append(fields, sensor.FieldLocation)
	}
	if m.description != nil {
		fields = append(fields, sensor.FieldDescription)
	}
	if m.active != nil {
		fields = append(fields, sensor.FieldActive)
	}
	if m.last_updated != nil {
		fields = append(fields, sensor.FieldLastUpdated)
	}
	if m.user_id != nil {
		fields = append(fields, sensor.FieldUserID)
	}
	if m.created_at != nil {
		fields = append(fields, sensor.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sensor.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SensorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sensor.FieldName:
		return m.Name()
	case sensor.FieldLocation:
		return m.Location()
	case sensor.FieldDescription:
		return m.Description()
	case sensor.FieldActive:
		return m.Active()
	case sensor.FieldLastUpdated:
		return m.LastUpdated()
	case sensor.FieldUserID:
		return m.UserID()
	case sensor.FieldCreatedAt:
		return m.CreatedAt()
	case sensor.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SensorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sensor.FieldName:
		return m.OldName(ctx)
	case sensor.FieldLocation:
		return m.OldLocation(ctx)
	case sensor.FieldDescription:
		return m.OldDescription(ctx)
	case sensor.FieldActive:
		return m.OldActive(ctx)
	case sensor.FieldLastUpdated:
		return m.OldLastUpdated(ctx)
	case sensor.FieldUserID:
		return m.OldUserID(ctx)
	case sensor.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sensor.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Sensor field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SensorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sensor.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case sensor.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case sensor.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case sensor.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case sensor.FieldLastUpdated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUpdated(v)
		return nil
	case sensor.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case sensor.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sensor.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Sensor field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SensorMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, sensor.FieldUserID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SensorMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sensor.FieldUserID:
		return m.AddedUserID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SensorMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sensor.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Sensor numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SensorMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sensor.FieldLocation) {
		fields = append(fields, sensor.FieldLocation)
	}
	if m.FieldCleared(sensor.FieldDescription) {
		fields = append(fields, sensor.FieldDescription)
	}
	if m.FieldCleared(sensor.FieldLastUpdated) {
		fields = append(fields, sensor.FieldLastUpdated)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SensorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SensorMutation) ClearField(name string) error {
	switch name {
	case sensor.FieldLocation:
		m.ClearLocation()
		return nil
	case sensor.FieldDescription:
		m.ClearDescription()
		return nil
	case sensor.FieldLastUpdated:
		m.ClearLastUpdated()
		return nil
	}
	return fmt.Errorf("unknown Sensor nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SensorMutation) ResetField(name string) error {
	switch name {
	case sensor.FieldName:
		m.ResetName()
		return nil
	case sensor.FieldLocation:
		m.ResetLocation()
		return nil
	case sensor.FieldDescription:
		m.ResetDescription()
		return nil
	case sensor.FieldActive:
		m.ResetActive()
		return nil
	case sensor.FieldLastUpdated:
		m.ResetLastUpdated()
		return nil
	case sensor.FieldUserID:
		m.ResetUserID()
		return nil
	case sensor.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sensor.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Sensor field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SensorMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._type != nil {
		edges = append(edges, sensor.EdgeType)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SensorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sensor.EdgeType:
		if id := m._type; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SensorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SensorMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SensorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_type {
		edges = append(edges, sensor.EdgeType)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SensorMutation) EdgeCleared(name string) bool {
	switch name {
	case sensor.EdgeType:
		return m.cleared_type
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SensorMutation) ClearEdge(name string) error {
	switch name {
	case sensor.EdgeType:
		m.ClearType()
		return nil
	}
	return fmt.Errorf("unknown Sensor unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SensorMutation) ResetEdge(name string) error {
	switch name {
	case sensor.EdgeType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Sensor edge %s", name)
}

// SensorTypeMutation represents an operation that mutates the SensorType nodes in the graph.
type SensorTypeMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	model          *string
	manufacturer   *string
	description    *string
	unit           *string
	min_value      *float64
	addmin_value   *float64
	max_value      *float64
	addmax_value   *float64
	created_at     *time.Time
	clearedFields  map[string]struct{}
	sensors        map[int]struct{}
	removedsensors map[int]struct{}
	clearedsensors bool
	done           bool
	oldValue       func(context.Context) (*SensorType, error)
	predicates     []predicate.SensorType
}

var _ ent.Mutation = (*SensorTypeMutation)(nil)

// sensortypeOption allows management of the mutation configuration using functional options.
type sensortypeOption func(*SensorTypeMutation)

// newSensorTypeMutation creates new mutation for the SensorType entity.
func newSensorTypeMutation(c config, op Op, opts ...sensortypeOption) *SensorTypeMutation {
	m := &SensorTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeSensorType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSensorTypeID sets the ID field of the mutation.
func withSensorTypeID(id int) sensortypeOption {
	return func(m *SensorTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *SensorType
		)
		m.oldValue = func(ctx context.Context) (*SensorType, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SensorType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSensorType sets the old SensorType of the mutation.
func withSensorType(node *SensorType) sensortypeOption {
	return func(m *SensorTypeMutation) {
		m.oldValue = func(context.Context) (*SensorType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SensorTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SensorTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SensorTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SensorTypeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SensorType.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *SensorTypeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SensorTypeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SensorType entity.
// If the SensorType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorTypeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SensorTypeMutation) ResetName() {
	m.name = nil
}

// SetModel sets the "model" field.
func (m *SensorTypeMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *SensorTypeMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the SensorType entity.
// If the SensorType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorTypeMutation) OldModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ResetModel resets all changes to the "model" field.
func (m *SensorTypeMutation) ResetModel() {
	m.model = nil
}

// SetManufacturer sets the "manufacturer" field.
func (m *SensorTypeMutation) SetManufacturer(s string) {
	m.manufacturer = &s
}

// Manufacturer returns the value of the "manufacturer" field in the mutation.
func (m *SensorTypeMutation) Manufacturer() (r string, exists bool) {
	v := m.manufacturer
	if v == nil {
		return
	}
	return *v, true
}

// OldManufacturer returns the old "manufacturer" field's value of the SensorType entity.
// If the SensorType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorTypeMutation) OldManufacturer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldManufacturer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldManufacturer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldManufacturer: %w", err)
	}
	return oldValue.Manufacturer, nil
}

// ClearManufacturer clears the value of the "manufacturer" field.
func (m *SensorTypeMutation) ClearManufacturer() {
	m.manufacturer = nil
	m.clearedFields[sensortype.FieldManufacturer] = struct{}{}
}

// ManufacturerCleared returns if the "manufacturer" field was cleared in this mutation.
func (m *SensorTypeMutation) ManufacturerCleared() bool {
	_, ok := m.clearedFields[sensortype.FieldManufacturer]
	return ok
}

// ResetManufacturer resets all changes to the "manufacturer" field.
func (m *SensorTypeMutation) ResetManufacturer() {
	m.manufacturer = nil
	delete(m.clearedFields, sensortype.FieldManufacturer)
}

// SetDescription sets the "description" field.
func (m *SensorTypeMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *SensorTypeMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the SensorType entity.
// If the SensorType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorTypeMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *SensorTypeMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[sensortype.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *SensorTypeMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[sensortype.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *SensorTypeMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, sensortype.FieldDescription)
}

// SetUnit sets the "unit" field.
func (m *SensorTypeMutation) SetUnit(s string) {
	m.unit = &s
}

// Unit returns the value of the "unit" field in the mutation.
func (m *SensorTypeMutation) Unit() (r string, exists bool) {
	v := m.unit
	if v == nil {
		return
	}
	return *v, true
}

// OldUnit returns the old "unit" field's value of the SensorType entity.
// If the SensorType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorTypeMutation) OldUnit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnit: %w", err)
	}
	return oldValue.Unit, nil
}

// ClearUnit clears the value of the "unit" field.
func (m *SensorTypeMutation) ClearUnit() {
	m.unit = nil
	m.clearedFields[sensortype.FieldUnit] = struct{}{}
}

// UnitCleared returns if the "unit" field was cleared in this mutation.
func (m *SensorTypeMutation) UnitCleared() bool {
	_, ok := m.clearedFields[sensortype.FieldUnit]
	return ok
}

// ResetUnit resets all changes to the "unit" field.
func (m *SensorTypeMutation) ResetUnit() {
	m.unit = nil
	delete(m.clearedFields, sensortype.FieldUnit)
}

// SetMinValue sets the "min_value" field.
func (m *SensorTypeMutation) SetMinValue(f float64) {
	m.min_value = &f
	m.addmin_value = nil
}

// MinValue returns the value of the "min_value" field in the mutation.
func (m *SensorTypeMutation) MinValue() (r float64, exists bool) {
	v := m.min_value
	if v == nil {
		return
	}
	return *v, true
}

// OldMinValue returns the old "min_value" field's value of the SensorType entity.
// If the SensorType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorTypeMutation) OldMinValue(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinValue: %w", err)
	}
	return oldValue.MinValue, nil
}

// AddMinValue adds f to the "min_value" field.
func (m *SensorTypeMutation) AddMinValue(f float64) {
	if m.addmin_value != nil {
		*m.addmin_value += f
	} else {
		m.addmin_value = &f
	}
}

// AddedMinValue returns the value that was added to the "min_value" field in this mutation.
func (m *SensorTypeMutation) AddedMinValue() (r float64, exists bool) {
	v := m.addmin_value
	if v == nil {
		return
	}
	return *v, true
}

// ClearMinValue clears the value of the "min_value" field.
func (m *SensorTypeMutation) ClearMinValue() {
	m.min_value = nil
	m.addmin_value = nil
	m.clearedFields[sensortype.FieldMinValue] = struct{}{}
}

// MinValueCleared returns if the "min_value" field was cleared in this mutation.
func (m *SensorTypeMutation) MinValueCleared() bool {
	_, ok := m.clearedFields[sensortype.FieldMinValue]
	return ok
}

// ResetMinValue resets all changes to the "min_value" field.
func (m *SensorTypeMutation) ResetMinValue() {
	m.min_value = nil
	m.addmin_value = nil
	delete(m.clearedFields, sensortype.FieldMinValue)
}

// SetMaxValue sets the "max_value" field.
func (m *SensorTypeMutation) SetMaxValue(f float64) {
	m.max_value = &f
	m.addmax_value = nil
}

// MaxValue returns the value of the "max_value" field in the mutation.
func (m *SensorTypeMutation) MaxValue() (r float64, exists bool) {
	v := m.max_value
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxValue returns the old "max_value" field's value of the SensorType entity.
// If the SensorType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorTypeMutation) OldMaxValue(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxValue: %w", err)
	}
	return oldValue.MaxValue, nil
}

// AddMaxValue adds f to the "max_value" field.
func (m *SensorTypeMutation) AddMaxValue(f float64) {
	if m.addmax_value != nil {
		*m.addmax_value += f
	} else {
		m.addmax_value = &f
	}
}

// AddedMaxValue returns the value that was added to the "max_value" field in this mutation.
func (m *SensorTypeMutation) AddedMaxValue() (r float64, exists bool) {
	v := m.addmax_value
	if v == nil {
		return
	}
	return *v, true
}

// ClearMaxValue clears the value of the "max_value" field.
func (m *SensorTypeMutation) ClearMaxValue() {
	m.max_value = nil
	m.addmax_value = nil
	m.clearedFields[sensortype.FieldMaxValue] = struct{}{}
}

// MaxValueCleared returns if the "max_value" field was cleared in this mutation.
func (m *SensorTypeMutation) MaxValueCleared() bool {
	_, ok := m.clearedFields[sensortype.FieldMaxValue]
	return ok
}

// ResetMaxValue resets all changes to the "max_value" field.
func (m *SensorTypeMutation) ResetMaxValue() {
	m.max_value = nil
	m.addmax_value = nil
	delete(m.clearedFields, sensortype.FieldMaxValue)
}

// SetCreatedAt sets the "created_at" field.
func (m *SensorTypeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SensorTypeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SensorType entity.
// If the SensorType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorTypeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SensorTypeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddSensorIDs adds the "sensors" edge to the Sensor entity by ids.
func (m *SensorTypeMutation) AddSensorIDs(ids ...int) {
	if m.sensors == nil {
		m.sensors = make(map[int]struct{})
	}
	for i := range ids {
		m.sensors[ids[i]] = struct{}{}
	}
}

// ClearSensors clears the "sensors" edge to the Sensor entity.
func (m *SensorTypeMutation) ClearSensors() {
	m.clearedsensors = true
}

// SensorsCleared reports if the "sensors" edge to the Sensor entity was cleared.
func (m *SensorTypeMutation) SensorsCleared() bool {
	return m.clearedsensors
}

// RemoveSensorIDs removes the "sensors" edge to the Sensor entity by IDs.
func (m *SensorTypeMutation) RemoveSensorIDs(ids ...int) {
	if m.removedsensors == nil {
		m.removedsensors = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.sensors, ids[i])
		m.removedsensors[ids[i]] = struct{}{}
	}
}

// RemovedSensors returns the removed IDs of the "sensors" edge to the Sensor entity.
func (m *SensorTypeMutation) RemovedSensorsIDs() (ids []int) {
	for id := range m.removedsensors {
		ids = append(ids, id)
	}
	return
}

// SensorsIDs returns the "sensors" edge IDs in the mutation.
func (m *SensorTypeMutation) SensorsIDs() (ids []int) {
	for id := range m.sensors {
		ids = append(ids, id)
	}
	return
}

// ResetSensors resets all changes to the "sensors" edge.
func (m *SensorTypeMutation) ResetSensors() {
	m.sensors = nil
	m.clearedsensors = false
	m.removedsensors = nil
}

// Where appends a list predicates to the SensorTypeMutation builder.
func (m *SensorTypeMutation) Where(ps ...predicate.SensorType) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SensorTypeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SensorTypeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SensorType, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SensorTypeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SensorTypeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SensorType).
func (m *SensorTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SensorTypeMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.name != nil {
		fields = append(fields, sensortype.FieldName)
	}
	if m.model != nil {
		fields = append(fields, sensortype.FieldModel)
	}
	if m.manufacturer != nil {
		fields = append(fields, sensortype.FieldManufacturer)
	}
	if m.description != nil {
		fields = append(fields, sensortype.FieldDescription)
	}
	if m.unit != nil {
		fields = append(fields, sensortype.FieldUnit)
	}
	if m.min_value != nil {
		fields = append(fields, sensortype.FieldMinValue)
	}
	if m.max_value != nil {
		fields = append(fields, sensortype.FieldMaxValue)
	}
	if m.created_at != nil {
		fields = append(fields, sensortype.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SensorTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sensortype.FieldName:
		return m.Name()
	case sensortype.FieldModel:
		return m.Model()
	case sensortype.FieldManufacturer:
		return m.Manufacturer()
	case sensortype.FieldDescription:
		return m.Description()
	case sensortype.FieldUnit:
		return m.Unit()
	case sensortype.FieldMinValue:
		return m.MinValue()
	case sensortype.FieldMaxValue:
		return m.MaxValue()
	case sensortype.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SensorTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sensortype.FieldName:
		return m.OldName(ctx)
	case sensortype.FieldModel:
		return m.OldModel(ctx)
	case sensortype.FieldManufacturer:
		return m.OldManufacturer(ctx)
	case sensortype.FieldDescription:
		return m.OldDescription(ctx)
	case sensortype.FieldUnit:
		return m.OldUnit(ctx)
	case sensortype.FieldMinValue:
		return m.OldMinValue(ctx)
	case sensortype.FieldMaxValue:
		return m.OldMaxValue(ctx)
	case sensortype.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown SensorType field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SensorTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sensortype.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case sensortype.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	case sensortype.FieldManufacturer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetManufacturer(v)
		return nil
	case sensortype.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case sensortype.FieldUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnit(v)
		return nil
	case sensortype.FieldMinValue:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinValue(v)
		return nil
	case sensortype.FieldMaxValue:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxValue(v)
		return nil
	case sensortype.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown SensorType field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SensorTypeMutation) AddedFields() []string {
	var fields []string
	if m.addmin_value != nil {
		fields = append(fields, sensortype.FieldMinValue)
	}
	if m.addmax_value != nil {
		fields = append(fields, sensortype.FieldMaxValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SensorTypeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sensortype.FieldMinValue:
		return m.AddedMinValue()
	case sensortype.FieldMaxValue:
		return m.AddedMaxValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SensorTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sensortype.FieldMinValue:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMinValue(v)
		return nil
	case sensortype.FieldMaxValue:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxValue(v)
		return nil
	}
	return fmt.Errorf("unknown SensorType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SensorTypeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sensortype.FieldManufacturer) {
		fields = append(fields, sensortype.FieldManufacturer)
	}
	if m.FieldCleared(sensortype.FieldDescription) {
		fields = append(fields, sensortype.FieldDescription)
	}
	if m.FieldCleared(sensortype.FieldUnit) {
		fields = append(fields, sensortype.FieldUnit)
	}
	if m.FieldCleared(sensortype.FieldMinValue) {
		fields = append(fields, sensortype.FieldMinValue)
	}
	if m.FieldCleared(sensortype.FieldMaxValue) {
		fields = append(fields, sensortype.FieldMaxValue)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SensorTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SensorTypeMutation) ClearField(name string) error {
	switch name {
	case sensortype.FieldManufacturer:
		m.ClearManufacturer()
		return nil
	case sensortype.FieldDescription:
		m.ClearDescription()
		return nil
	case sensortype.FieldUnit:
		m.ClearUnit()
		return nil
	case sensortype.FieldMinValue:
		m.ClearMinValue()
		return nil
	case sensortype.FieldMaxValue:
		m.ClearMaxValue()
		return nil
	}
	return fmt.Errorf("unknown SensorType nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SensorTypeMutation) ResetField(name string) error {
	switch name {
	case sensortype.FieldName:
		m.ResetName()
		return nil
	case sensortype.FieldModel:
		m.ResetModel()
		return nil
	case sensortype.FieldManufacturer:
		m.ResetManufacturer()
		return nil
	case sensortype.FieldDescription:
		m.ResetDescription()
		return nil
	case sensortype.FieldUnit:
		m.ResetUnit()
		return nil
	case sensortype.FieldMinValue:
		m.ResetMinValue()
		return nil
	case sensortype.FieldMaxValue:
		m.ResetMaxValue()
		return nil
	case sensortype.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown SensorType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SensorTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.sensors != nil {
		edges = append(edges, sensortype.EdgeSensors)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SensorTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sensortype.EdgeSensors:
		ids := make([]ent.Value, 0, len(m.sensors))
		for id := range m.sensors {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SensorTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsensors != nil {
		edges = append(edges, sensortype.EdgeSensors)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SensorTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case sensortype.EdgeSensors:
		ids := make([]ent.Value, 0, len(m.removedsensors))
		for id := range m.removedsensors {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SensorTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsensors {
		edges = append(edges, sensortype.EdgeSensors)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SensorTypeMutation) EdgeCleared(name string) bool {
	switch name {
	case sensortype.EdgeSensors:
		return m.clearedsensors
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SensorTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown SensorType unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SensorTypeMutation) ResetEdge(name string) error {
	switch name {
	case sensortype.EdgeSensors:
		m.ResetSensors()
		return nil
	}
	return fmt.Errorf("unknown SensorType edge %s", name)
}
