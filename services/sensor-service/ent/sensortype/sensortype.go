// Code generated by ent, DO NOT EDIT.

package sensortype

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sensortype type in the database.
	Label = "sensor_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldManufacturer holds the string denoting the manufacturer field in the database.
	FieldManufacturer = "manufacturer"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldUnit holds the string denoting the unit field in the database.
	FieldUnit = "unit"
	// FieldMinValue holds the string denoting the min_value field in the database.
	FieldMinValue = "min_value"
	// FieldMaxValue holds the string denoting the max_value field in the database.
	FieldMaxValue = "max_value"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeSensors holds the string denoting the sensors edge name in mutations.
	EdgeSensors = "sensors"
	// Table holds the table name of the sensortype in the database.
	Table = "sensor_types"
	// SensorsTable is the table that holds the sensors relation/edge.
	SensorsTable = "sensors"
	// SensorsInverseTable is the table name for the Sensor entity.
	// It exists in this package in order to avoid circular dependency with the "sensor" package.
	SensorsInverseTable = "sensors"
	// SensorsColumn is the table column denoting the sensors relation/edge.
	SensorsColumn = "sensor_type_sensors"
)

// Columns holds all SQL columns for sensortype fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldModel,
	FieldManufacturer,
	FieldDescription,
	FieldUnit,
	FieldMinValue,
	FieldMaxValue,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// ModelValidator is a validator for the "model" field. It is called by the builders before save.
	ModelValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the SensorType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByManufacturer orders the results by the manufacturer field.
func ByManufacturer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldManufacturer, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByUnit orders the results by the unit field.
func ByUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnit, opts...).ToFunc()
}

// ByMinValue orders the results by the min_value field.
func ByMinValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinValue, opts...).ToFunc()
}

// ByMaxValue orders the results by the max_value field.
func ByMaxValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxValue, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// BySensorsCount orders the results by sensors count.
func BySensorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSensorsStep(), opts...)
	}
}

// BySensors orders the results by sensors terms.
func BySensors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSensorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSensorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SensorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SensorsTable, SensorsColumn),
	)
}
