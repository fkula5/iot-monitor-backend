// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/skni-kod/iot-monitor-backend/services/sensor-service/ent/predicate"
	"github.com/skni-kod/iot-monitor-backend/services/sensor-service/ent/sensor"
	"github.com/skni-kod/iot-monitor-backend/services/sensor-service/ent/sensortype"
)

// SensorUpdate is the builder for updating Sensor entities.
type SensorUpdate struct {
	config
	hooks    []Hook
	mutation *SensorMutation
}

// Where appends a list predicates to the SensorUpdate builder.
func (su *SensorUpdate) Where(ps ...predicate.Sensor) *SensorUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SensorUpdate) SetName(s string) *SensorUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SensorUpdate) SetNillableName(s *string) *SensorUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetLocation sets the "location" field.
func (su *SensorUpdate) SetLocation(s string) *SensorUpdate {
	su.mutation.SetLocation(s)
	return su
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (su *SensorUpdate) SetNillableLocation(s *string) *SensorUpdate {
	if s != nil {
		su.SetLocation(*s)
	}
	return su
}

// ClearLocation clears the value of the "location" field.
func (su *SensorUpdate) ClearLocation() *SensorUpdate {
	su.mutation.ClearLocation()
	return su
}

// SetDescription sets the "description" field.
func (su *SensorUpdate) SetDescription(s string) *SensorUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SensorUpdate) SetNillableDescription(s *string) *SensorUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *SensorUpdate) ClearDescription() *SensorUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetActive sets the "active" field.
func (su *SensorUpdate) SetActive(b bool) *SensorUpdate {
	su.mutation.SetActive(b)
	return su
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (su *SensorUpdate) SetNillableActive(b *bool) *SensorUpdate {
	if b != nil {
		su.SetActive(*b)
	}
	return su
}

// SetLastUpdated sets the "last_updated" field.
func (su *SensorUpdate) SetLastUpdated(t time.Time) *SensorUpdate {
	su.mutation.SetLastUpdated(t)
	return su
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (su *SensorUpdate) SetNillableLastUpdated(t *time.Time) *SensorUpdate {
	if t != nil {
		su.SetLastUpdated(*t)
	}
	return su
}

// ClearLastUpdated clears the value of the "last_updated" field.
func (su *SensorUpdate) ClearLastUpdated() *SensorUpdate {
	su.mutation.ClearLastUpdated()
	return su
}

// SetUserID sets the "user_id" field.
func (su *SensorUpdate) SetUserID(i int64) *SensorUpdate {
	su.mutation.ResetUserID()
	su.mutation.SetUserID(i)
	return su
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (su *SensorUpdate) SetNillableUserID(i *int64) *SensorUpdate {
	if i != nil {
		su.SetUserID(*i)
	}
	return su
}

// AddUserID adds i to the "user_id" field.
func (su *SensorUpdate) AddUserID(i int64) *SensorUpdate {
	su.mutation.AddUserID(i)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SensorUpdate) SetUpdatedAt(t time.Time) *SensorUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetTypeID sets the "type" edge to the SensorType entity by ID.
func (su *SensorUpdate) SetTypeID(id int) *SensorUpdate {
	su.mutation.SetTypeID(id)
	return su
}

// SetType sets the "type" edge to the SensorType entity.
func (su *SensorUpdate) SetType(s *SensorType) *SensorUpdate {
	return su.SetTypeID(s.ID)
}

// Mutation returns the SensorMutation object of the builder.
func (su *SensorUpdate) Mutation() *SensorMutation {
	return su.mutation
}

// ClearType clears the "type" edge to the SensorType entity.
func (su *SensorUpdate) ClearType() *SensorUpdate {
	su.mutation.ClearType()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SensorUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SensorUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SensorUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SensorUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SensorUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := sensor.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SensorUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := sensor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Sensor.name": %w`, err)}
		}
	}
	if su.mutation.TypeCleared() && len(su.mutation.TypeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Sensor.type"`)
	}
	return nil
}

func (su *SensorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sensor.Table, sensor.Columns, sqlgraph.NewFieldSpec(sensor.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(sensor.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Location(); ok {
		_spec.SetField(sensor.FieldLocation, field.TypeString, value)
	}
	if su.mutation.LocationCleared() {
		_spec.ClearField(sensor.FieldLocation, field.TypeString)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(sensor.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(sensor.FieldDescription, field.TypeString)
	}
	if value, ok := su.mutation.Active(); ok {
		_spec.SetField(sensor.FieldActive, field.TypeBool, value)
	}
	if value, ok := su.mutation.LastUpdated(); ok {
		_spec.SetField(sensor.FieldLastUpdated, field.TypeTime, value)
	}
	if su.mutation.LastUpdatedCleared() {
		_spec.ClearField(sensor.FieldLastUpdated, field.TypeTime)
	}
	if value, ok := su.mutation.UserID(); ok {
		_spec.SetField(sensor.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedUserID(); ok {
		_spec.AddField(sensor.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(sensor.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.TypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sensor.TypeTable,
			Columns: []string{sensor.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sensortype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sensor.TypeTable,
			Columns: []string{sensor.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sensortype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sensor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SensorUpdateOne is the builder for updating a single Sensor entity.
type SensorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SensorMutation
}

// SetName sets the "name" field.
func (suo *SensorUpdateOne) SetName(s string) *SensorUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SensorUpdateOne) SetNillableName(s *string) *SensorUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetLocation sets the "location" field.
func (suo *SensorUpdateOne) SetLocation(s string) *SensorUpdateOne {
	suo.mutation.SetLocation(s)
	return suo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (suo *SensorUpdateOne) SetNillableLocation(s *string) *SensorUpdateOne {
	if s != nil {
		suo.SetLocation(*s)
	}
	return suo
}

// ClearLocation clears the value of the "location" field.
func (suo *SensorUpdateOne) ClearLocation() *SensorUpdateOne {
	suo.mutation.ClearLocation()
	return suo
}

// SetDescription sets the "description" field.
func (suo *SensorUpdateOne) SetDescription(s string) *SensorUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SensorUpdateOne) SetNillableDescription(s *string) *SensorUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *SensorUpdateOne) ClearDescription() *SensorUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetActive sets the "active" field.
func (suo *SensorUpdateOne) SetActive(b bool) *SensorUpdateOne {
	suo.mutation.SetActive(b)
	return suo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (suo *SensorUpdateOne) SetNillableActive(b *bool) *SensorUpdateOne {
	if b != nil {
		suo.SetActive(*b)
	}
	return suo
}

// SetLastUpdated sets the "last_updated" field.
func (suo *SensorUpdateOne) SetLastUpdated(t time.Time) *SensorUpdateOne {
	suo.mutation.SetLastUpdated(t)
	return suo
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (suo *SensorUpdateOne) SetNillableLastUpdated(t *time.Time) *SensorUpdateOne {
	if t != nil {
		suo.SetLastUpdated(*t)
	}
	return suo
}

// ClearLastUpdated clears the value of the "last_updated" field.
func (suo *SensorUpdateOne) ClearLastUpdated() *SensorUpdateOne {
	suo.mutation.ClearLastUpdated()
	return suo
}

// SetUserID sets the "user_id" field.
func (suo *SensorUpdateOne) SetUserID(i int64) *SensorUpdateOne {
	suo.mutation.ResetUserID()
	suo.mutation.SetUserID(i)
	return suo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suo *SensorUpdateOne) SetNillableUserID(i *int64) *SensorUpdateOne {
	if i != nil {
		suo.SetUserID(*i)
	}
	return suo
}

// AddUserID adds i to the "user_id" field.
func (suo *SensorUpdateOne) AddUserID(i int64) *SensorUpdateOne {
	suo.mutation.AddUserID(i)
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SensorUpdateOne) SetUpdatedAt(t time.Time) *SensorUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetTypeID sets the "type" edge to the SensorType entity by ID.
func (suo *SensorUpdateOne) SetTypeID(id int) *SensorUpdateOne {
	suo.mutation.SetTypeID(id)
	return suo
}

// SetType sets the "type" edge to the SensorType entity.
func (suo *SensorUpdateOne) SetType(s *SensorType) *SensorUpdateOne {
	return suo.SetTypeID(s.ID)
}

// Mutation returns the SensorMutation object of the builder.
func (suo *SensorUpdateOne) Mutation() *SensorMutation {
	return suo.mutation
}

// ClearType clears the "type" edge to the SensorType entity.
func (suo *SensorUpdateOne) ClearType() *SensorUpdateOne {
	suo.mutation.ClearType()
	return suo
}

// Where appends a list predicates to the SensorUpdate builder.
func (suo *SensorUpdateOne) Where(ps ...predicate.Sensor) *SensorUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SensorUpdateOne) Select(field string, fields ...string) *SensorUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Sensor entity.
func (suo *SensorUpdateOne) Save(ctx context.Context) (*Sensor, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SensorUpdateOne) SaveX(ctx context.Context) *Sensor {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SensorUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SensorUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SensorUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := sensor.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SensorUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := sensor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Sensor.name": %w`, err)}
		}
	}
	if suo.mutation.TypeCleared() && len(suo.mutation.TypeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Sensor.type"`)
	}
	return nil
}

func (suo *SensorUpdateOne) sqlSave(ctx context.Context) (_node *Sensor, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sensor.Table, sensor.Columns, sqlgraph.NewFieldSpec(sensor.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Sensor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sensor.FieldID)
		for _, f := range fields {
			if !sensor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sensor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(sensor.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Location(); ok {
		_spec.SetField(sensor.FieldLocation, field.TypeString, value)
	}
	if suo.mutation.LocationCleared() {
		_spec.ClearField(sensor.FieldLocation, field.TypeString)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(sensor.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(sensor.FieldDescription, field.TypeString)
	}
	if value, ok := suo.mutation.Active(); ok {
		_spec.SetField(sensor.FieldActive, field.TypeBool, value)
	}
	if value, ok := suo.mutation.LastUpdated(); ok {
		_spec.SetField(sensor.FieldLastUpdated, field.TypeTime, value)
	}
	if suo.mutation.LastUpdatedCleared() {
		_spec.ClearField(sensor.FieldLastUpdated, field.TypeTime)
	}
	if value, ok := suo.mutation.UserID(); ok {
		_spec.SetField(sensor.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedUserID(); ok {
		_spec.AddField(sensor.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(sensor.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.TypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sensor.TypeTable,
			Columns: []string{sensor.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sensortype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sensor.TypeTable,
			Columns: []string{sensor.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sensortype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Sensor{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sensor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
