// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/skni-kod/iot-monitor-backend/services/sensor-service/ent/sensor"
	"github.com/skni-kod/iot-monitor-backend/services/sensor-service/ent/sensortype"
)

// SensorCreate is the builder for creating a Sensor entity.
type SensorCreate struct {
	config
	mutation *SensorMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (sc *SensorCreate) SetName(s string) *SensorCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetLocation sets the "location" field.
func (sc *SensorCreate) SetLocation(s string) *SensorCreate {
	sc.mutation.SetLocation(s)
	return sc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (sc *SensorCreate) SetNillableLocation(s *string) *SensorCreate {
	if s != nil {
		sc.SetLocation(*s)
	}
	return sc
}

// SetDescription sets the "description" field.
func (sc *SensorCreate) SetDescription(s string) *SensorCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *SensorCreate) SetNillableDescription(s *string) *SensorCreate {
	if s != nil {
		sc.SetDescription(*s)
	}
	return sc
}

// SetActive sets the "active" field.
func (sc *SensorCreate) SetActive(b bool) *SensorCreate {
	sc.mutation.SetActive(b)
	return sc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (sc *SensorCreate) SetNillableActive(b *bool) *SensorCreate {
	if b != nil {
		sc.SetActive(*b)
	}
	return sc
}

// SetLastUpdated sets the "last_updated" field.
func (sc *SensorCreate) SetLastUpdated(t time.Time) *SensorCreate {
	sc.mutation.SetLastUpdated(t)
	return sc
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (sc *SensorCreate) SetNillableLastUpdated(t *time.Time) *SensorCreate {
	if t != nil {
		sc.SetLastUpdated(*t)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SensorCreate) SetCreatedAt(t time.Time) *SensorCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SensorCreate) SetNillableCreatedAt(t *time.Time) *SensorCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SensorCreate) SetUpdatedAt(t time.Time) *SensorCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SensorCreate) SetNillableUpdatedAt(t *time.Time) *SensorCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetTypeID sets the "type" edge to the SensorType entity by ID.
func (sc *SensorCreate) SetTypeID(id int) *SensorCreate {
	sc.mutation.SetTypeID(id)
	return sc
}

// SetType sets the "type" edge to the SensorType entity.
func (sc *SensorCreate) SetType(s *SensorType) *SensorCreate {
	return sc.SetTypeID(s.ID)
}

// Mutation returns the SensorMutation object of the builder.
func (sc *SensorCreate) Mutation() *SensorMutation {
	return sc.mutation
}

// Save creates the Sensor in the database.
func (sc *SensorCreate) Save(ctx context.Context) (*Sensor, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SensorCreate) SaveX(ctx context.Context) *Sensor {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SensorCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SensorCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SensorCreate) defaults() {
	if _, ok := sc.mutation.Active(); !ok {
		v := sensor.DefaultActive
		sc.mutation.SetActive(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := sensor.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := sensor.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SensorCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Sensor.name"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := sensor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Sensor.name": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "Sensor.active"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Sensor.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Sensor.updated_at"`)}
	}
	if len(sc.mutation.TypeIDs()) == 0 {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required edge "Sensor.type"`)}
	}
	return nil
}

func (sc *SensorCreate) sqlSave(ctx context.Context) (*Sensor, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SensorCreate) createSpec() (*Sensor, *sqlgraph.CreateSpec) {
	var (
		_node = &Sensor{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(sensor.Table, sqlgraph.NewFieldSpec(sensor.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(sensor.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Location(); ok {
		_spec.SetField(sensor.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(sensor.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sc.mutation.Active(); ok {
		_spec.SetField(sensor.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := sc.mutation.LastUpdated(); ok {
		_spec.SetField(sensor.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(sensor.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(sensor.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := sc.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sensor.TypeTable,
			Columns: []string{sensor.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sensortype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.sensor_type = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SensorCreateBulk is the builder for creating many Sensor entities in bulk.
type SensorCreateBulk struct {
	config
	err      error
	builders []*SensorCreate
}

// Save creates the Sensor entities in the database.
func (scb *SensorCreateBulk) Save(ctx context.Context) ([]*Sensor, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Sensor, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SensorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SensorCreateBulk) SaveX(ctx context.Context) []*Sensor {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SensorCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SensorCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
