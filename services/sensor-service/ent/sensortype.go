// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/skni-kod/iot-monitor-backend/services/sensor-service/ent/sensortype"
)

// SensorType is the model entity for the SensorType schema.
type SensorType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name of the sensor type
	Name string `json:"name,omitempty"`
	// Model of the sensor type
	Model string `json:"model,omitempty"`
	// Manufacturer of the sensor type
	Manufacturer string `json:"manufacturer,omitempty"`
	// Description of the sensor type
	Description string `json:"description,omitempty"`
	// Unit holds the value of the "unit" field.
	Unit string `json:"unit,omitempty"`
	// MinValue holds the value of the "min_value" field.
	MinValue float64 `json:"min_value,omitempty"`
	// MaxValue holds the value of the "max_value" field.
	MaxValue float64 `json:"max_value,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SensorTypeQuery when eager-loading is set.
	Edges        SensorTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SensorTypeEdges holds the relations/edges for other nodes in the graph.
type SensorTypeEdges struct {
	// Sensors holds the value of the sensors edge.
	Sensors []*Sensor `json:"sensors,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SensorsOrErr returns the Sensors value or an error if the edge
// was not loaded in eager-loading.
func (e SensorTypeEdges) SensorsOrErr() ([]*Sensor, error) {
	if e.loadedTypes[0] {
		return e.Sensors, nil
	}
	return nil, &NotLoadedError{edge: "sensors"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SensorType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sensortype.FieldMinValue, sensortype.FieldMaxValue:
			values[i] = new(sql.NullFloat64)
		case sensortype.FieldID:
			values[i] = new(sql.NullInt64)
		case sensortype.FieldName, sensortype.FieldModel, sensortype.FieldManufacturer, sensortype.FieldDescription, sensortype.FieldUnit:
			values[i] = new(sql.NullString)
		case sensortype.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SensorType fields.
func (st *SensorType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sensortype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = int(value.Int64)
		case sensortype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				st.Name = value.String
			}
		case sensortype.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				st.Model = value.String
			}
		case sensortype.FieldManufacturer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field manufacturer", values[i])
			} else if value.Valid {
				st.Manufacturer = value.String
			}
		case sensortype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				st.Description = value.String
			}
		case sensortype.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				st.Unit = value.String
			}
		case sensortype.FieldMinValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field min_value", values[i])
			} else if value.Valid {
				st.MinValue = value.Float64
			}
		case sensortype.FieldMaxValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field max_value", values[i])
			} else if value.Valid {
				st.MaxValue = value.Float64
			}
		case sensortype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				st.CreatedAt = value.Time
			}
		default:
			st.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SensorType.
// This includes values selected through modifiers, order, etc.
func (st *SensorType) Value(name string) (ent.Value, error) {
	return st.selectValues.Get(name)
}

// QuerySensors queries the "sensors" edge of the SensorType entity.
func (st *SensorType) QuerySensors() *SensorQuery {
	return NewSensorTypeClient(st.config).QuerySensors(st)
}

// Update returns a builder for updating this SensorType.
// Note that you need to call SensorType.Unwrap() before calling this method if this SensorType
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SensorType) Update() *SensorTypeUpdateOne {
	return NewSensorTypeClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the SensorType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *SensorType) Unwrap() *SensorType {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SensorType is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SensorType) String() string {
	var builder strings.Builder
	builder.WriteString("SensorType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("name=")
	builder.WriteString(st.Name)
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(st.Model)
	builder.WriteString(", ")
	builder.WriteString("manufacturer=")
	builder.WriteString(st.Manufacturer)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(st.Description)
	builder.WriteString(", ")
	builder.WriteString("unit=")
	builder.WriteString(st.Unit)
	builder.WriteString(", ")
	builder.WriteString("min_value=")
	builder.WriteString(fmt.Sprintf("%v", st.MinValue))
	builder.WriteString(", ")
	builder.WriteString("max_value=")
	builder.WriteString(fmt.Sprintf("%v", st.MaxValue))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(st.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SensorTypes is a parsable slice of SensorType.
type SensorTypes []*SensorType
