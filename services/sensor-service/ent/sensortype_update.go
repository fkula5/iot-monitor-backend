// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/skni-kod/iot-monitor-backend/services/sensor-service/ent/predicate"
	"github.com/skni-kod/iot-monitor-backend/services/sensor-service/ent/sensor"
	"github.com/skni-kod/iot-monitor-backend/services/sensor-service/ent/sensortype"
)

// SensorTypeUpdate is the builder for updating SensorType entities.
type SensorTypeUpdate struct {
	config
	hooks    []Hook
	mutation *SensorTypeMutation
}

// Where appends a list predicates to the SensorTypeUpdate builder.
func (stu *SensorTypeUpdate) Where(ps ...predicate.SensorType) *SensorTypeUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetName sets the "name" field.
func (stu *SensorTypeUpdate) SetName(s string) *SensorTypeUpdate {
	stu.mutation.SetName(s)
	return stu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (stu *SensorTypeUpdate) SetNillableName(s *string) *SensorTypeUpdate {
	if s != nil {
		stu.SetName(*s)
	}
	return stu
}

// SetModel sets the "model" field.
func (stu *SensorTypeUpdate) SetModel(s string) *SensorTypeUpdate {
	stu.mutation.SetModel(s)
	return stu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (stu *SensorTypeUpdate) SetNillableModel(s *string) *SensorTypeUpdate {
	if s != nil {
		stu.SetModel(*s)
	}
	return stu
}

// SetManufacturer sets the "manufacturer" field.
func (stu *SensorTypeUpdate) SetManufacturer(s string) *SensorTypeUpdate {
	stu.mutation.SetManufacturer(s)
	return stu
}

// SetNillableManufacturer sets the "manufacturer" field if the given value is not nil.
func (stu *SensorTypeUpdate) SetNillableManufacturer(s *string) *SensorTypeUpdate {
	if s != nil {
		stu.SetManufacturer(*s)
	}
	return stu
}

// ClearManufacturer clears the value of the "manufacturer" field.
func (stu *SensorTypeUpdate) ClearManufacturer() *SensorTypeUpdate {
	stu.mutation.ClearManufacturer()
	return stu
}

// SetDescription sets the "description" field.
func (stu *SensorTypeUpdate) SetDescription(s string) *SensorTypeUpdate {
	stu.mutation.SetDescription(s)
	return stu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (stu *SensorTypeUpdate) SetNillableDescription(s *string) *SensorTypeUpdate {
	if s != nil {
		stu.SetDescription(*s)
	}
	return stu
}

// ClearDescription clears the value of the "description" field.
func (stu *SensorTypeUpdate) ClearDescription() *SensorTypeUpdate {
	stu.mutation.ClearDescription()
	return stu
}

// SetUnit sets the "unit" field.
func (stu *SensorTypeUpdate) SetUnit(s string) *SensorTypeUpdate {
	stu.mutation.SetUnit(s)
	return stu
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (stu *SensorTypeUpdate) SetNillableUnit(s *string) *SensorTypeUpdate {
	if s != nil {
		stu.SetUnit(*s)
	}
	return stu
}

// ClearUnit clears the value of the "unit" field.
func (stu *SensorTypeUpdate) ClearUnit() *SensorTypeUpdate {
	stu.mutation.ClearUnit()
	return stu
}

// SetMinValue sets the "min_value" field.
func (stu *SensorTypeUpdate) SetMinValue(f float64) *SensorTypeUpdate {
	stu.mutation.ResetMinValue()
	stu.mutation.SetMinValue(f)
	return stu
}

// SetNillableMinValue sets the "min_value" field if the given value is not nil.
func (stu *SensorTypeUpdate) SetNillableMinValue(f *float64) *SensorTypeUpdate {
	if f != nil {
		stu.SetMinValue(*f)
	}
	return stu
}

// AddMinValue adds f to the "min_value" field.
func (stu *SensorTypeUpdate) AddMinValue(f float64) *SensorTypeUpdate {
	stu.mutation.AddMinValue(f)
	return stu
}

// ClearMinValue clears the value of the "min_value" field.
func (stu *SensorTypeUpdate) ClearMinValue() *SensorTypeUpdate {
	stu.mutation.ClearMinValue()
	return stu
}

// SetMaxValue sets the "max_value" field.
func (stu *SensorTypeUpdate) SetMaxValue(f float64) *SensorTypeUpdate {
	stu.mutation.ResetMaxValue()
	stu.mutation.SetMaxValue(f)
	return stu
}

// SetNillableMaxValue sets the "max_value" field if the given value is not nil.
func (stu *SensorTypeUpdate) SetNillableMaxValue(f *float64) *SensorTypeUpdate {
	if f != nil {
		stu.SetMaxValue(*f)
	}
	return stu
}

// AddMaxValue adds f to the "max_value" field.
func (stu *SensorTypeUpdate) AddMaxValue(f float64) *SensorTypeUpdate {
	stu.mutation.AddMaxValue(f)
	return stu
}

// ClearMaxValue clears the value of the "max_value" field.
func (stu *SensorTypeUpdate) ClearMaxValue() *SensorTypeUpdate {
	stu.mutation.ClearMaxValue()
	return stu
}

// SetCreatedAt sets the "created_at" field.
func (stu *SensorTypeUpdate) SetCreatedAt(t time.Time) *SensorTypeUpdate {
	stu.mutation.SetCreatedAt(t)
	return stu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (stu *SensorTypeUpdate) SetNillableCreatedAt(t *time.Time) *SensorTypeUpdate {
	if t != nil {
		stu.SetCreatedAt(*t)
	}
	return stu
}

// AddSensorIDs adds the "sensors" edge to the Sensor entity by IDs.
func (stu *SensorTypeUpdate) AddSensorIDs(ids ...int) *SensorTypeUpdate {
	stu.mutation.AddSensorIDs(ids...)
	return stu
}

// AddSensors adds the "sensors" edges to the Sensor entity.
func (stu *SensorTypeUpdate) AddSensors(s ...*Sensor) *SensorTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.AddSensorIDs(ids...)
}

// Mutation returns the SensorTypeMutation object of the builder.
func (stu *SensorTypeUpdate) Mutation() *SensorTypeMutation {
	return stu.mutation
}

// ClearSensors clears all "sensors" edges to the Sensor entity.
func (stu *SensorTypeUpdate) ClearSensors() *SensorTypeUpdate {
	stu.mutation.ClearSensors()
	return stu
}

// RemoveSensorIDs removes the "sensors" edge to Sensor entities by IDs.
func (stu *SensorTypeUpdate) RemoveSensorIDs(ids ...int) *SensorTypeUpdate {
	stu.mutation.RemoveSensorIDs(ids...)
	return stu
}

// RemoveSensors removes "sensors" edges to Sensor entities.
func (stu *SensorTypeUpdate) RemoveSensors(s ...*Sensor) *SensorTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.RemoveSensorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *SensorTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SensorTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SensorTypeUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SensorTypeUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stu *SensorTypeUpdate) check() error {
	if v, ok := stu.mutation.Name(); ok {
		if err := sensortype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SensorType.name": %w`, err)}
		}
	}
	if v, ok := stu.mutation.Model(); ok {
		if err := sensortype.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`ent: validator failed for field "SensorType.model": %w`, err)}
		}
	}
	return nil
}

func (stu *SensorTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := stu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sensortype.Table, sensortype.Columns, sqlgraph.NewFieldSpec(sensortype.FieldID, field.TypeInt))
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.Name(); ok {
		_spec.SetField(sensortype.FieldName, field.TypeString, value)
	}
	if value, ok := stu.mutation.Model(); ok {
		_spec.SetField(sensortype.FieldModel, field.TypeString, value)
	}
	if value, ok := stu.mutation.Manufacturer(); ok {
		_spec.SetField(sensortype.FieldManufacturer, field.TypeString, value)
	}
	if stu.mutation.ManufacturerCleared() {
		_spec.ClearField(sensortype.FieldManufacturer, field.TypeString)
	}
	if value, ok := stu.mutation.Description(); ok {
		_spec.SetField(sensortype.FieldDescription, field.TypeString, value)
	}
	if stu.mutation.DescriptionCleared() {
		_spec.ClearField(sensortype.FieldDescription, field.TypeString)
	}
	if value, ok := stu.mutation.Unit(); ok {
		_spec.SetField(sensortype.FieldUnit, field.TypeString, value)
	}
	if stu.mutation.UnitCleared() {
		_spec.ClearField(sensortype.FieldUnit, field.TypeString)
	}
	if value, ok := stu.mutation.MinValue(); ok {
		_spec.SetField(sensortype.FieldMinValue, field.TypeFloat64, value)
	}
	if value, ok := stu.mutation.AddedMinValue(); ok {
		_spec.AddField(sensortype.FieldMinValue, field.TypeFloat64, value)
	}
	if stu.mutation.MinValueCleared() {
		_spec.ClearField(sensortype.FieldMinValue, field.TypeFloat64)
	}
	if value, ok := stu.mutation.MaxValue(); ok {
		_spec.SetField(sensortype.FieldMaxValue, field.TypeFloat64, value)
	}
	if value, ok := stu.mutation.AddedMaxValue(); ok {
		_spec.AddField(sensortype.FieldMaxValue, field.TypeFloat64, value)
	}
	if stu.mutation.MaxValueCleared() {
		_spec.ClearField(sensortype.FieldMaxValue, field.TypeFloat64)
	}
	if value, ok := stu.mutation.CreatedAt(); ok {
		_spec.SetField(sensortype.FieldCreatedAt, field.TypeTime, value)
	}
	if stu.mutation.SensorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sensortype.SensorsTable,
			Columns: []string{sensortype.SensorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sensor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedSensorsIDs(); len(nodes) > 0 && !stu.mutation.SensorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sensortype.SensorsTable,
			Columns: []string{sensortype.SensorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sensor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.SensorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sensortype.SensorsTable,
			Columns: []string{sensortype.SensorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sensor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sensortype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// SensorTypeUpdateOne is the builder for updating a single SensorType entity.
type SensorTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SensorTypeMutation
}

// SetName sets the "name" field.
func (stuo *SensorTypeUpdateOne) SetName(s string) *SensorTypeUpdateOne {
	stuo.mutation.SetName(s)
	return stuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (stuo *SensorTypeUpdateOne) SetNillableName(s *string) *SensorTypeUpdateOne {
	if s != nil {
		stuo.SetName(*s)
	}
	return stuo
}

// SetModel sets the "model" field.
func (stuo *SensorTypeUpdateOne) SetModel(s string) *SensorTypeUpdateOne {
	stuo.mutation.SetModel(s)
	return stuo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (stuo *SensorTypeUpdateOne) SetNillableModel(s *string) *SensorTypeUpdateOne {
	if s != nil {
		stuo.SetModel(*s)
	}
	return stuo
}

// SetManufacturer sets the "manufacturer" field.
func (stuo *SensorTypeUpdateOne) SetManufacturer(s string) *SensorTypeUpdateOne {
	stuo.mutation.SetManufacturer(s)
	return stuo
}

// SetNillableManufacturer sets the "manufacturer" field if the given value is not nil.
func (stuo *SensorTypeUpdateOne) SetNillableManufacturer(s *string) *SensorTypeUpdateOne {
	if s != nil {
		stuo.SetManufacturer(*s)
	}
	return stuo
}

// ClearManufacturer clears the value of the "manufacturer" field.
func (stuo *SensorTypeUpdateOne) ClearManufacturer() *SensorTypeUpdateOne {
	stuo.mutation.ClearManufacturer()
	return stuo
}

// SetDescription sets the "description" field.
func (stuo *SensorTypeUpdateOne) SetDescription(s string) *SensorTypeUpdateOne {
	stuo.mutation.SetDescription(s)
	return stuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (stuo *SensorTypeUpdateOne) SetNillableDescription(s *string) *SensorTypeUpdateOne {
	if s != nil {
		stuo.SetDescription(*s)
	}
	return stuo
}

// ClearDescription clears the value of the "description" field.
func (stuo *SensorTypeUpdateOne) ClearDescription() *SensorTypeUpdateOne {
	stuo.mutation.ClearDescription()
	return stuo
}

// SetUnit sets the "unit" field.
func (stuo *SensorTypeUpdateOne) SetUnit(s string) *SensorTypeUpdateOne {
	stuo.mutation.SetUnit(s)
	return stuo
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (stuo *SensorTypeUpdateOne) SetNillableUnit(s *string) *SensorTypeUpdateOne {
	if s != nil {
		stuo.SetUnit(*s)
	}
	return stuo
}

// ClearUnit clears the value of the "unit" field.
func (stuo *SensorTypeUpdateOne) ClearUnit() *SensorTypeUpdateOne {
	stuo.mutation.ClearUnit()
	return stuo
}

// SetMinValue sets the "min_value" field.
func (stuo *SensorTypeUpdateOne) SetMinValue(f float64) *SensorTypeUpdateOne {
	stuo.mutation.ResetMinValue()
	stuo.mutation.SetMinValue(f)
	return stuo
}

// SetNillableMinValue sets the "min_value" field if the given value is not nil.
func (stuo *SensorTypeUpdateOne) SetNillableMinValue(f *float64) *SensorTypeUpdateOne {
	if f != nil {
		stuo.SetMinValue(*f)
	}
	return stuo
}

// AddMinValue adds f to the "min_value" field.
func (stuo *SensorTypeUpdateOne) AddMinValue(f float64) *SensorTypeUpdateOne {
	stuo.mutation.AddMinValue(f)
	return stuo
}

// ClearMinValue clears the value of the "min_value" field.
func (stuo *SensorTypeUpdateOne) ClearMinValue() *SensorTypeUpdateOne {
	stuo.mutation.ClearMinValue()
	return stuo
}

// SetMaxValue sets the "max_value" field.
func (stuo *SensorTypeUpdateOne) SetMaxValue(f float64) *SensorTypeUpdateOne {
	stuo.mutation.ResetMaxValue()
	stuo.mutation.SetMaxValue(f)
	return stuo
}

// SetNillableMaxValue sets the "max_value" field if the given value is not nil.
func (stuo *SensorTypeUpdateOne) SetNillableMaxValue(f *float64) *SensorTypeUpdateOne {
	if f != nil {
		stuo.SetMaxValue(*f)
	}
	return stuo
}

// AddMaxValue adds f to the "max_value" field.
func (stuo *SensorTypeUpdateOne) AddMaxValue(f float64) *SensorTypeUpdateOne {
	stuo.mutation.AddMaxValue(f)
	return stuo
}

// ClearMaxValue clears the value of the "max_value" field.
func (stuo *SensorTypeUpdateOne) ClearMaxValue() *SensorTypeUpdateOne {
	stuo.mutation.ClearMaxValue()
	return stuo
}

// SetCreatedAt sets the "created_at" field.
func (stuo *SensorTypeUpdateOne) SetCreatedAt(t time.Time) *SensorTypeUpdateOne {
	stuo.mutation.SetCreatedAt(t)
	return stuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (stuo *SensorTypeUpdateOne) SetNillableCreatedAt(t *time.Time) *SensorTypeUpdateOne {
	if t != nil {
		stuo.SetCreatedAt(*t)
	}
	return stuo
}

// AddSensorIDs adds the "sensors" edge to the Sensor entity by IDs.
func (stuo *SensorTypeUpdateOne) AddSensorIDs(ids ...int) *SensorTypeUpdateOne {
	stuo.mutation.AddSensorIDs(ids...)
	return stuo
}

// AddSensors adds the "sensors" edges to the Sensor entity.
func (stuo *SensorTypeUpdateOne) AddSensors(s ...*Sensor) *SensorTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.AddSensorIDs(ids...)
}

// Mutation returns the SensorTypeMutation object of the builder.
func (stuo *SensorTypeUpdateOne) Mutation() *SensorTypeMutation {
	return stuo.mutation
}

// ClearSensors clears all "sensors" edges to the Sensor entity.
func (stuo *SensorTypeUpdateOne) ClearSensors() *SensorTypeUpdateOne {
	stuo.mutation.ClearSensors()
	return stuo
}

// RemoveSensorIDs removes the "sensors" edge to Sensor entities by IDs.
func (stuo *SensorTypeUpdateOne) RemoveSensorIDs(ids ...int) *SensorTypeUpdateOne {
	stuo.mutation.RemoveSensorIDs(ids...)
	return stuo
}

// RemoveSensors removes "sensors" edges to Sensor entities.
func (stuo *SensorTypeUpdateOne) RemoveSensors(s ...*Sensor) *SensorTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.RemoveSensorIDs(ids...)
}

// Where appends a list predicates to the SensorTypeUpdate builder.
func (stuo *SensorTypeUpdateOne) Where(ps ...predicate.SensorType) *SensorTypeUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *SensorTypeUpdateOne) Select(field string, fields ...string) *SensorTypeUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated SensorType entity.
func (stuo *SensorTypeUpdateOne) Save(ctx context.Context) (*SensorType, error) {
	return withHooks(ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SensorTypeUpdateOne) SaveX(ctx context.Context) *SensorType {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *SensorTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SensorTypeUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stuo *SensorTypeUpdateOne) check() error {
	if v, ok := stuo.mutation.Name(); ok {
		if err := sensortype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SensorType.name": %w`, err)}
		}
	}
	if v, ok := stuo.mutation.Model(); ok {
		if err := sensortype.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`ent: validator failed for field "SensorType.model": %w`, err)}
		}
	}
	return nil
}

func (stuo *SensorTypeUpdateOne) sqlSave(ctx context.Context) (_node *SensorType, err error) {
	if err := stuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sensortype.Table, sensortype.Columns, sqlgraph.NewFieldSpec(sensortype.FieldID, field.TypeInt))
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SensorType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sensortype.FieldID)
		for _, f := range fields {
			if !sensortype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sensortype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.Name(); ok {
		_spec.SetField(sensortype.FieldName, field.TypeString, value)
	}
	if value, ok := stuo.mutation.Model(); ok {
		_spec.SetField(sensortype.FieldModel, field.TypeString, value)
	}
	if value, ok := stuo.mutation.Manufacturer(); ok {
		_spec.SetField(sensortype.FieldManufacturer, field.TypeString, value)
	}
	if stuo.mutation.ManufacturerCleared() {
		_spec.ClearField(sensortype.FieldManufacturer, field.TypeString)
	}
	if value, ok := stuo.mutation.Description(); ok {
		_spec.SetField(sensortype.FieldDescription, field.TypeString, value)
	}
	if stuo.mutation.DescriptionCleared() {
		_spec.ClearField(sensortype.FieldDescription, field.TypeString)
	}
	if value, ok := stuo.mutation.Unit(); ok {
		_spec.SetField(sensortype.FieldUnit, field.TypeString, value)
	}
	if stuo.mutation.UnitCleared() {
		_spec.ClearField(sensortype.FieldUnit, field.TypeString)
	}
	if value, ok := stuo.mutation.MinValue(); ok {
		_spec.SetField(sensortype.FieldMinValue, field.TypeFloat64, value)
	}
	if value, ok := stuo.mutation.AddedMinValue(); ok {
		_spec.AddField(sensortype.FieldMinValue, field.TypeFloat64, value)
	}
	if stuo.mutation.MinValueCleared() {
		_spec.ClearField(sensortype.FieldMinValue, field.TypeFloat64)
	}
	if value, ok := stuo.mutation.MaxValue(); ok {
		_spec.SetField(sensortype.FieldMaxValue, field.TypeFloat64, value)
	}
	if value, ok := stuo.mutation.AddedMaxValue(); ok {
		_spec.AddField(sensortype.FieldMaxValue, field.TypeFloat64, value)
	}
	if stuo.mutation.MaxValueCleared() {
		_spec.ClearField(sensortype.FieldMaxValue, field.TypeFloat64)
	}
	if value, ok := stuo.mutation.CreatedAt(); ok {
		_spec.SetField(sensortype.FieldCreatedAt, field.TypeTime, value)
	}
	if stuo.mutation.SensorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sensortype.SensorsTable,
			Columns: []string{sensortype.SensorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sensor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedSensorsIDs(); len(nodes) > 0 && !stuo.mutation.SensorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sensortype.SensorsTable,
			Columns: []string{sensortype.SensorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sensor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.SensorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sensortype.SensorsTable,
			Columns: []string{sensortype.SensorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sensor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SensorType{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sensortype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
