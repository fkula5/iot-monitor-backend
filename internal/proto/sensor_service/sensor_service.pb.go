// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: sensor_service.proto

package sensor_service

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SensorType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Model         string                 `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	Manufacturer  string                 `protobuf:"bytes,4,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Unit          string                 `protobuf:"bytes,6,opt,name=unit,proto3" json:"unit,omitempty"`
	MinValue      float32                `protobuf:"fixed32,7,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue      float32                `protobuf:"fixed32,8,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	CreatedAt     *timestamp.Timestamp   `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorType) Reset() {
	*x = SensorType{}
	mi := &file_sensor_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorType) ProtoMessage() {}

func (x *SensorType) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorType.ProtoReflect.Descriptor instead.
func (*SensorType) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{0}
}

func (x *SensorType) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SensorType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SensorType) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *SensorType) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *SensorType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SensorType) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *SensorType) GetMinValue() float32 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *SensorType) GetMaxValue() float32 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *SensorType) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type Sensor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Location      string                 `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Active        bool                   `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	LastUpdated   *timestamp.Timestamp   `protobuf:"bytes,6,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	CreatedAt     *timestamp.Timestamp   `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamp.Timestamp   `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	SensorTypeId  int64                  `protobuf:"varint,9,opt,name=sensor_type_id,json=sensorTypeId,proto3" json:"sensor_type_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sensor) Reset() {
	*x = Sensor{}
	mi := &file_sensor_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sensor) ProtoMessage() {}

func (x *Sensor) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sensor.ProtoReflect.Descriptor instead.
func (*Sensor) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{1}
}

func (x *Sensor) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Sensor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sensor) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Sensor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Sensor) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Sensor) GetLastUpdated() *timestamp.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *Sensor) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Sensor) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Sensor) GetSensorTypeId() int64 {
	if x != nil {
		return x.SensorTypeId
	}
	return 0
}

type CreateSensorTypeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Model         string                 `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	Manufacturer  string                 `protobuf:"bytes,3,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Unit          string                 `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	MinValue      float32                `protobuf:"fixed32,6,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue      float32                `protobuf:"fixed32,7,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSensorTypeRequest) Reset() {
	*x = CreateSensorTypeRequest{}
	mi := &file_sensor_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSensorTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSensorTypeRequest) ProtoMessage() {}

func (x *CreateSensorTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSensorTypeRequest.ProtoReflect.Descriptor instead.
func (*CreateSensorTypeRequest) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSensorTypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSensorTypeRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CreateSensorTypeRequest) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *CreateSensorTypeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateSensorTypeRequest) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *CreateSensorTypeRequest) GetMinValue() float32 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *CreateSensorTypeRequest) GetMaxValue() float32 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

type CreateSensorTypeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SensorType    *SensorType            `protobuf:"bytes,1,opt,name=sensor_type,json=sensorType,proto3" json:"sensor_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSensorTypeResponse) Reset() {
	*x = CreateSensorTypeResponse{}
	mi := &file_sensor_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSensorTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSensorTypeResponse) ProtoMessage() {}

func (x *CreateSensorTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSensorTypeResponse.ProtoReflect.Descriptor instead.
func (*CreateSensorTypeResponse) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSensorTypeResponse) GetSensorType() *SensorType {
	if x != nil {
		return x.SensorType
	}
	return nil
}

type GetSensorTypeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSensorTypeRequest) Reset() {
	*x = GetSensorTypeRequest{}
	mi := &file_sensor_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSensorTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSensorTypeRequest) ProtoMessage() {}

func (x *GetSensorTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSensorTypeRequest.ProtoReflect.Descriptor instead.
func (*GetSensorTypeRequest) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetSensorTypeRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetSensorTypeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SensorType    *SensorType            `protobuf:"bytes,1,opt,name=sensor_type,json=sensorType,proto3" json:"sensor_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSensorTypeResponse) Reset() {
	*x = GetSensorTypeResponse{}
	mi := &file_sensor_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSensorTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSensorTypeResponse) ProtoMessage() {}

func (x *GetSensorTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSensorTypeResponse.ProtoReflect.Descriptor instead.
func (*GetSensorTypeResponse) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetSensorTypeResponse) GetSensorType() *SensorType {
	if x != nil {
		return x.SensorType
	}
	return nil
}

type ListSensorTypesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSensorTypesRequest) Reset() {
	*x = ListSensorTypesRequest{}
	mi := &file_sensor_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSensorTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSensorTypesRequest) ProtoMessage() {}

func (x *ListSensorTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSensorTypesRequest.ProtoReflect.Descriptor instead.
func (*ListSensorTypesRequest) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{6}
}

type ListSensorTypesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SensorTypes   []*SensorType          `protobuf:"bytes,1,rep,name=sensor_types,json=sensorTypes,proto3" json:"sensor_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSensorTypesResponse) Reset() {
	*x = ListSensorTypesResponse{}
	mi := &file_sensor_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSensorTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSensorTypesResponse) ProtoMessage() {}

func (x *ListSensorTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSensorTypesResponse.ProtoReflect.Descriptor instead.
func (*ListSensorTypesResponse) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListSensorTypesResponse) GetSensorTypes() []*SensorType {
	if x != nil {
		return x.SensorTypes
	}
	return nil
}

type CreateSensorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Location      string                 `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Active        bool                   `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	SensorTypeId  int64                  `protobuf:"varint,5,opt,name=sensor_type_id,json=sensorTypeId,proto3" json:"sensor_type_id,omitempty"`
	UserId        int64                  `protobuf:"varint,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSensorRequest) Reset() {
	*x = CreateSensorRequest{}
	mi := &file_sensor_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSensorRequest) ProtoMessage() {}

func (x *CreateSensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSensorRequest.ProtoReflect.Descriptor instead.
func (*CreateSensorRequest) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{8}
}

func (x *CreateSensorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSensorRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CreateSensorRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateSensorRequest) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *CreateSensorRequest) GetSensorTypeId() int64 {
	if x != nil {
		return x.SensorTypeId
	}
	return 0
}

func (x *CreateSensorRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CreateSensorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sensor        *Sensor                `protobuf:"bytes,1,opt,name=sensor,proto3" json:"sensor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSensorResponse) Reset() {
	*x = CreateSensorResponse{}
	mi := &file_sensor_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSensorResponse) ProtoMessage() {}

func (x *CreateSensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSensorResponse.ProtoReflect.Descriptor instead.
func (*CreateSensorResponse) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{9}
}

func (x *CreateSensorResponse) GetSensor() *Sensor {
	if x != nil {
		return x.Sensor
	}
	return nil
}

type GetSensorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSensorRequest) Reset() {
	*x = GetSensorRequest{}
	mi := &file_sensor_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSensorRequest) ProtoMessage() {}

func (x *GetSensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSensorRequest.ProtoReflect.Descriptor instead.
func (*GetSensorRequest) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetSensorRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetSensorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sensor        *Sensor                `protobuf:"bytes,1,opt,name=sensor,proto3" json:"sensor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSensorResponse) Reset() {
	*x = GetSensorResponse{}
	mi := &file_sensor_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSensorResponse) ProtoMessage() {}

func (x *GetSensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSensorResponse.ProtoReflect.Descriptor instead.
func (*GetSensorResponse) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetSensorResponse) GetSensor() *Sensor {
	if x != nil {
		return x.Sensor
	}
	return nil
}

type ListSensorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSensorsRequest) Reset() {
	*x = ListSensorsRequest{}
	mi := &file_sensor_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSensorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSensorsRequest) ProtoMessage() {}

func (x *ListSensorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSensorsRequest.ProtoReflect.Descriptor instead.
func (*ListSensorsRequest) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListSensorsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ListSensorsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sensors       []*Sensor              `protobuf:"bytes,1,rep,name=sensors,proto3" json:"sensors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSensorsResponse) Reset() {
	*x = ListSensorsResponse{}
	mi := &file_sensor_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSensorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSensorsResponse) ProtoMessage() {}

func (x *ListSensorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSensorsResponse.ProtoReflect.Descriptor instead.
func (*ListSensorsResponse) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListSensorsResponse) GetSensors() []*Sensor {
	if x != nil {
		return x.Sensors
	}
	return nil
}

type UpdateSensorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Location      string                 `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Active        bool                   `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	SensorTypeId  int64                  `protobuf:"varint,6,opt,name=sensor_type_id,json=sensorTypeId,proto3" json:"sensor_type_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSensorRequest) Reset() {
	*x = UpdateSensorRequest{}
	mi := &file_sensor_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSensorRequest) ProtoMessage() {}

func (x *UpdateSensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSensorRequest.ProtoReflect.Descriptor instead.
func (*UpdateSensorRequest) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateSensorRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSensorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSensorRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UpdateSensorRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateSensorRequest) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *UpdateSensorRequest) GetSensorTypeId() int64 {
	if x != nil {
		return x.SensorTypeId
	}
	return 0
}

type UpdateSensorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sensor        *Sensor                `protobuf:"bytes,1,opt,name=sensor,proto3" json:"sensor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSensorResponse) Reset() {
	*x = UpdateSensorResponse{}
	mi := &file_sensor_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSensorResponse) ProtoMessage() {}

func (x *UpdateSensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSensorResponse.ProtoReflect.Descriptor instead.
func (*UpdateSensorResponse) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateSensorResponse) GetSensor() *Sensor {
	if x != nil {
		return x.Sensor
	}
	return nil
}

type DeleteSensorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSensorRequest) Reset() {
	*x = DeleteSensorRequest{}
	mi := &file_sensor_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSensorRequest) ProtoMessage() {}

func (x *DeleteSensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSensorRequest.ProtoReflect.Descriptor instead.
func (*DeleteSensorRequest) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteSensorRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteSensorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSensorResponse) Reset() {
	*x = DeleteSensorResponse{}
	mi := &file_sensor_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSensorResponse) ProtoMessage() {}

func (x *DeleteSensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSensorResponse.ProtoReflect.Descriptor instead.
func (*DeleteSensorResponse) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{17}
}

type SetSensorActiveRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetSensorActiveRequest) Reset() {
	*x = SetSensorActiveRequest{}
	mi := &file_sensor_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSensorActiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSensorActiveRequest) ProtoMessage() {}

func (x *SetSensorActiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSensorActiveRequest.ProtoReflect.Descriptor instead.
func (*SetSensorActiveRequest) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{18}
}

func (x *SetSensorActiveRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SetSensorActiveResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sensor        *Sensor                `protobuf:"bytes,1,opt,name=sensor,proto3" json:"sensor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetSensorActiveResponse) Reset() {
	*x = SetSensorActiveResponse{}
	mi := &file_sensor_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSensorActiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSensorActiveResponse) ProtoMessage() {}

func (x *SetSensorActiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSensorActiveResponse.ProtoReflect.Descriptor instead.
func (*SetSensorActiveResponse) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{19}
}

func (x *SetSensorActiveResponse) GetSensor() *Sensor {
	if x != nil {
		return x.Sensor
	}
	return nil
}

type UpdateSensorTypeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Model         string                 `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	Manufacturer  string                 `protobuf:"bytes,4,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Unit          string                 `protobuf:"bytes,6,opt,name=unit,proto3" json:"unit,omitempty"`
	MinValue      float32                `protobuf:"fixed32,7,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue      float32                `protobuf:"fixed32,8,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSensorTypeRequest) Reset() {
	*x = UpdateSensorTypeRequest{}
	mi := &file_sensor_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSensorTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSensorTypeRequest) ProtoMessage() {}

func (x *UpdateSensorTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSensorTypeRequest.ProtoReflect.Descriptor instead.
func (*UpdateSensorTypeRequest) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateSensorTypeRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSensorTypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSensorTypeRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *UpdateSensorTypeRequest) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *UpdateSensorTypeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateSensorTypeRequest) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *UpdateSensorTypeRequest) GetMinValue() float32 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *UpdateSensorTypeRequest) GetMaxValue() float32 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

type UpdateSensorTypeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SensorType    *SensorType            `protobuf:"bytes,1,opt,name=sensor_type,json=sensorType,proto3" json:"sensor_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSensorTypeResponse) Reset() {
	*x = UpdateSensorTypeResponse{}
	mi := &file_sensor_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSensorTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSensorTypeResponse) ProtoMessage() {}

func (x *UpdateSensorTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSensorTypeResponse.ProtoReflect.Descriptor instead.
func (*UpdateSensorTypeResponse) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateSensorTypeResponse) GetSensorType() *SensorType {
	if x != nil {
		return x.SensorType
	}
	return nil
}

type DeleteSensorTypeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSensorTypeRequest) Reset() {
	*x = DeleteSensorTypeRequest{}
	mi := &file_sensor_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSensorTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSensorTypeRequest) ProtoMessage() {}

func (x *DeleteSensorTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSensorTypeRequest.ProtoReflect.Descriptor instead.
func (*DeleteSensorTypeRequest) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteSensorTypeRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteSensorTypeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSensorTypeResponse) Reset() {
	*x = DeleteSensorTypeResponse{}
	mi := &file_sensor_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSensorTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSensorTypeResponse) ProtoMessage() {}

func (x *DeleteSensorTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSensorTypeResponse.ProtoReflect.Descriptor instead.
func (*DeleteSensorTypeResponse) Descriptor() ([]byte, []int) {
	return file_sensor_service_proto_rawDescGZIP(), []int{23}
}

var File_sensor_service_proto protoreflect.FileDescriptor

const file_sensor_service_proto_rawDesc = "" +
	"\n" +
	"\x14sensor_service.proto\x12\x0esensor_service\x1a\x1fgoogle/protobuf/timestamp.proto\"\x95\x02\n" +
	"\n" +
	"SensorType\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05model\x18\x03 \x01(\tR\x05model\x12\"\n" +
	"\fmanufacturer\x18\x04 \x01(\tR\fmanufacturer\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12\x12\n" +
	"\x04unit\x18\x06 \x01(\tR\x04unit\x12\x1b\n" +
	"\tmin_value\x18\a \x01(\x02R\bminValue\x12\x1b\n" +
	"\tmax_value\x18\b \x01(\x02R\bmaxValue\x129\n" +
	"\n" +
	"created_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\"\xdd\x02\n" +
	"\x06Sensor\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1a\n" +
	"\blocation\x18\x03 \x01(\tR\blocation\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x16\n" +
	"\x06active\x18\x05 \x01(\bR\x06active\x12=\n" +
	"\flast_updated\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\vlastUpdated\x129\n" +
	"\n" +
	"created_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12$\n" +
	"\x0esensor_type_id\x18\t \x01(\x03R\fsensorTypeId\"\xd7\x01\n" +
	"\x17CreateSensorTypeRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05model\x18\x02 \x01(\tR\x05model\x12\"\n" +
	"\fmanufacturer\x18\x03 \x01(\tR\fmanufacturer\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x12\n" +
	"\x04unit\x18\x05 \x01(\tR\x04unit\x12\x1b\n" +
	"\tmin_value\x18\x06 \x01(\x02R\bminValue\x12\x1b\n" +
	"\tmax_value\x18\a \x01(\x02R\bmaxValue\"W\n" +
	"\x18CreateSensorTypeResponse\x12;\n" +
	"\vsensor_type\x18\x01 \x01(\v2\x1a.sensor_service.SensorTypeR\n" +
	"sensorType\"&\n" +
	"\x14GetSensorTypeRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\"T\n" +
	"\x15GetSensorTypeResponse\x12;\n" +
	"\vsensor_type\x18\x01 \x01(\v2\x1a.sensor_service.SensorTypeR\n" +
	"sensorType\"\x18\n" +
	"\x16ListSensorTypesRequest\"X\n" +
	"\x17ListSensorTypesResponse\x12=\n" +
	"\fsensor_types\x18\x01 \x03(\v2\x1a.sensor_service.SensorTypeR\vsensorTypes\"\xbe\x01\n" +
	"\x13CreateSensorRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\blocation\x18\x02 \x01(\tR\blocation\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x16\n" +
	"\x06active\x18\x04 \x01(\bR\x06active\x12$\n" +
	"\x0esensor_type_id\x18\x05 \x01(\x03R\fsensorTypeId\x12\x17\n" +
	"\auser_id\x18\x06 \x01(\x03R\x06userId\"F\n" +
	"\x14CreateSensorResponse\x12.\n" +
	"\x06sensor\x18\x01 \x01(\v2\x16.sensor_service.SensorR\x06sensor\"\"\n" +
	"\x10GetSensorRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\"C\n" +
	"\x11GetSensorResponse\x12.\n" +
	"\x06sensor\x18\x01 \x01(\v2\x16.sensor_service.SensorR\x06sensor\"-\n" +
	"\x12ListSensorsRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\"G\n" +
	"\x13ListSensorsResponse\x120\n" +
	"\asensors\x18\x01 \x03(\v2\x16.sensor_service.SensorR\asensors\"\xb5\x01\n" +
	"\x13UpdateSensorRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1a\n" +
	"\blocation\x18\x03 \x01(\tR\blocation\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x16\n" +
	"\x06active\x18\x05 \x01(\bR\x06active\x12$\n" +
	"\x0esensor_type_id\x18\x06 \x01(\x03R\fsensorTypeId\"F\n" +
	"\x14UpdateSensorResponse\x12.\n" +
	"\x06sensor\x18\x01 \x01(\v2\x16.sensor_service.SensorR\x06sensor\"%\n" +
	"\x13DeleteSensorRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\"\x16\n" +
	"\x14DeleteSensorResponse\"(\n" +
	"\x16SetSensorActiveRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\"I\n" +
	"\x17SetSensorActiveResponse\x12.\n" +
	"\x06sensor\x18\x01 \x01(\v2\x16.sensor_service.SensorR\x06sensor\"\xe7\x01\n" +
	"\x17UpdateSensorTypeRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05model\x18\x03 \x01(\tR\x05model\x12\"\n" +
	"\fmanufacturer\x18\x04 \x01(\tR\fmanufacturer\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12\x12\n" +
	"\x04unit\x18\x06 \x01(\tR\x04unit\x12\x1b\n" +
	"\tmin_value\x18\a \x01(\x02R\bminValue\x12\x1b\n" +
	"\tmax_value\x18\b \x01(\x02R\bmaxValue\"W\n" +
	"\x18UpdateSensorTypeResponse\x12;\n" +
	"\vsensor_type\x18\x01 \x01(\v2\x1a.sensor_service.SensorTypeR\n" +
	"sensorType\")\n" +
	"\x17DeleteSensorTypeRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\"\x1a\n" +
	"\x18DeleteSensorTypeResponse2\xbb\b\n" +
	"\rSensorService\x12g\n" +
	"\x10CreateSensorType\x12'.sensor_service.CreateSensorTypeRequest\x1a(.sensor_service.CreateSensorTypeResponse\"\x00\x12^\n" +
	"\rGetSensorType\x12$.sensor_service.GetSensorTypeRequest\x1a%.sensor_service.GetSensorTypeResponse\"\x00\x12d\n" +
	"\x0fListSensorTypes\x12&.sensor_service.ListSensorTypesRequest\x1a'.sensor_service.ListSensorTypesResponse\"\x00\x12g\n" +
	"\x10UpdateSensorType\x12'.sensor_service.UpdateSensorTypeRequest\x1a(.sensor_service.UpdateSensorTypeResponse\"\x00\x12g\n" +
	"\x10DeleteSensorType\x12'.sensor_service.DeleteSensorTypeRequest\x1a(.sensor_service.DeleteSensorTypeResponse\"\x00\x12[\n" +
	"\fCreateSensor\x12#.sensor_service.CreateSensorRequest\x1a$.sensor_service.CreateSensorResponse\"\x00\x12R\n" +
	"\tGetSensor\x12 .sensor_service.GetSensorRequest\x1a!.sensor_service.GetSensorResponse\"\x00\x12X\n" +
	"\vListSensors\x12\".sensor_service.ListSensorsRequest\x1a#.sensor_service.ListSensorsResponse\"\x00\x12[\n" +
	"\fUpdateSensor\x12#.sensor_service.UpdateSensorRequest\x1a$.sensor_service.UpdateSensorResponse\"\x00\x12[\n" +
	"\fDeleteSensor\x12#.sensor_service.DeleteSensorRequest\x1a$.sensor_service.DeleteSensorResponse\"\x00\x12d\n" +
	"\x0fSetSensorActive\x12&.sensor_service.SetSensorActiveRequest\x1a'.sensor_service.SetSensorActiveResponse\"\x00BGZEgithub.com/skni-kod/iot-monitor-backend/internal/proto/sensor_serviceb\x06proto3"

var (
	file_sensor_service_proto_rawDescOnce sync.Once
	file_sensor_service_proto_rawDescData []byte
)

func file_sensor_service_proto_rawDescGZIP() []byte {
	file_sensor_service_proto_rawDescOnce.Do(func() {
		file_sensor_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sensor_service_proto_rawDesc), len(file_sensor_service_proto_rawDesc)))
	})
	return file_sensor_service_proto_rawDescData
}

var file_sensor_service_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_sensor_service_proto_goTypes = []any{
	(*SensorType)(nil),               // 0: sensor_service.SensorType
	(*Sensor)(nil),                   // 1: sensor_service.Sensor
	(*CreateSensorTypeRequest)(nil),  // 2: sensor_service.CreateSensorTypeRequest
	(*CreateSensorTypeResponse)(nil), // 3: sensor_service.CreateSensorTypeResponse
	(*GetSensorTypeRequest)(nil),     // 4: sensor_service.GetSensorTypeRequest
	(*GetSensorTypeResponse)(nil),    // 5: sensor_service.GetSensorTypeResponse
	(*ListSensorTypesRequest)(nil),   // 6: sensor_service.ListSensorTypesRequest
	(*ListSensorTypesResponse)(nil),  // 7: sensor_service.ListSensorTypesResponse
	(*CreateSensorRequest)(nil),      // 8: sensor_service.CreateSensorRequest
	(*CreateSensorResponse)(nil),     // 9: sensor_service.CreateSensorResponse
	(*GetSensorRequest)(nil),         // 10: sensor_service.GetSensorRequest
	(*GetSensorResponse)(nil),        // 11: sensor_service.GetSensorResponse
	(*ListSensorsRequest)(nil),       // 12: sensor_service.ListSensorsRequest
	(*ListSensorsResponse)(nil),      // 13: sensor_service.ListSensorsResponse
	(*UpdateSensorRequest)(nil),      // 14: sensor_service.UpdateSensorRequest
	(*UpdateSensorResponse)(nil),     // 15: sensor_service.UpdateSensorResponse
	(*DeleteSensorRequest)(nil),      // 16: sensor_service.DeleteSensorRequest
	(*DeleteSensorResponse)(nil),     // 17: sensor_service.DeleteSensorResponse
	(*SetSensorActiveRequest)(nil),   // 18: sensor_service.SetSensorActiveRequest
	(*SetSensorActiveResponse)(nil),  // 19: sensor_service.SetSensorActiveResponse
	(*UpdateSensorTypeRequest)(nil),  // 20: sensor_service.UpdateSensorTypeRequest
	(*UpdateSensorTypeResponse)(nil), // 21: sensor_service.UpdateSensorTypeResponse
	(*DeleteSensorTypeRequest)(nil),  // 22: sensor_service.DeleteSensorTypeRequest
	(*DeleteSensorTypeResponse)(nil), // 23: sensor_service.DeleteSensorTypeResponse
	(*timestamp.Timestamp)(nil),      // 24: google.protobuf.Timestamp
}
var file_sensor_service_proto_depIdxs = []int32{
	24, // 0: sensor_service.SensorType.created_at:type_name -> google.protobuf.Timestamp
	24, // 1: sensor_service.Sensor.last_updated:type_name -> google.protobuf.Timestamp
	24, // 2: sensor_service.Sensor.created_at:type_name -> google.protobuf.Timestamp
	24, // 3: sensor_service.Sensor.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 4: sensor_service.CreateSensorTypeResponse.sensor_type:type_name -> sensor_service.SensorType
	0,  // 5: sensor_service.GetSensorTypeResponse.sensor_type:type_name -> sensor_service.SensorType
	0,  // 6: sensor_service.ListSensorTypesResponse.sensor_types:type_name -> sensor_service.SensorType
	1,  // 7: sensor_service.CreateSensorResponse.sensor:type_name -> sensor_service.Sensor
	1,  // 8: sensor_service.GetSensorResponse.sensor:type_name -> sensor_service.Sensor
	1,  // 9: sensor_service.ListSensorsResponse.sensors:type_name -> sensor_service.Sensor
	1,  // 10: sensor_service.UpdateSensorResponse.sensor:type_name -> sensor_service.Sensor
	1,  // 11: sensor_service.SetSensorActiveResponse.sensor:type_name -> sensor_service.Sensor
	0,  // 12: sensor_service.UpdateSensorTypeResponse.sensor_type:type_name -> sensor_service.SensorType
	2,  // 13: sensor_service.SensorService.CreateSensorType:input_type -> sensor_service.CreateSensorTypeRequest
	4,  // 14: sensor_service.SensorService.GetSensorType:input_type -> sensor_service.GetSensorTypeRequest
	6,  // 15: sensor_service.SensorService.ListSensorTypes:input_type -> sensor_service.ListSensorTypesRequest
	20, // 16: sensor_service.SensorService.UpdateSensorType:input_type -> sensor_service.UpdateSensorTypeRequest
	22, // 17: sensor_service.SensorService.DeleteSensorType:input_type -> sensor_service.DeleteSensorTypeRequest
	8,  // 18: sensor_service.SensorService.CreateSensor:input_type -> sensor_service.CreateSensorRequest
	10, // 19: sensor_service.SensorService.GetSensor:input_type -> sensor_service.GetSensorRequest
	12, // 20: sensor_service.SensorService.ListSensors:input_type -> sensor_service.ListSensorsRequest
	14, // 21: sensor_service.SensorService.UpdateSensor:input_type -> sensor_service.UpdateSensorRequest
	16, // 22: sensor_service.SensorService.DeleteSensor:input_type -> sensor_service.DeleteSensorRequest
	18, // 23: sensor_service.SensorService.SetSensorActive:input_type -> sensor_service.SetSensorActiveRequest
	3,  // 24: sensor_service.SensorService.CreateSensorType:output_type -> sensor_service.CreateSensorTypeResponse
	5,  // 25: sensor_service.SensorService.GetSensorType:output_type -> sensor_service.GetSensorTypeResponse
	7,  // 26: sensor_service.SensorService.ListSensorTypes:output_type -> sensor_service.ListSensorTypesResponse
	21, // 27: sensor_service.SensorService.UpdateSensorType:output_type -> sensor_service.UpdateSensorTypeResponse
	23, // 28: sensor_service.SensorService.DeleteSensorType:output_type -> sensor_service.DeleteSensorTypeResponse
	9,  // 29: sensor_service.SensorService.CreateSensor:output_type -> sensor_service.CreateSensorResponse
	11, // 30: sensor_service.SensorService.GetSensor:output_type -> sensor_service.GetSensorResponse
	13, // 31: sensor_service.SensorService.ListSensors:output_type -> sensor_service.ListSensorsResponse
	15, // 32: sensor_service.SensorService.UpdateSensor:output_type -> sensor_service.UpdateSensorResponse
	17, // 33: sensor_service.SensorService.DeleteSensor:output_type -> sensor_service.DeleteSensorResponse
	19, // 34: sensor_service.SensorService.SetSensorActive:output_type -> sensor_service.SetSensorActiveResponse
	24, // [24:35] is the sub-list for method output_type
	13, // [13:24] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_sensor_service_proto_init() }
func file_sensor_service_proto_init() {
	if File_sensor_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sensor_service_proto_rawDesc), len(file_sensor_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sensor_service_proto_goTypes,
		DependencyIndexes: file_sensor_service_proto_depIdxs,
		MessageInfos:      file_sensor_service_proto_msgTypes,
	}.Build()
	File_sensor_service_proto = out.File
	file_sensor_service_proto_goTypes = nil
	file_sensor_service_proto_depIdxs = nil
}
